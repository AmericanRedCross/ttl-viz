
<style>

#progress-indicators {
	background: #fff;
	table-layout: auto !important;
}
.progress-pie {
	float: left;
	margin: 2px 8px;
}

.btn-map-filter{
	padding-left: 15px;
	padding-right: 15px;
}

.panel-group{
  position:absolute;
	padding-left: 15px;
	padding-right: 15px;
  z-index: 1;
}

</style>

<div class="container">

<header class="row header">
	<div class="col-md-12">
		<h1>Overall Program Progess </h1>
	</div>
	<div>
		<div class="col-md-9" style="margin-top:10px;"> <p>as of December 2016</p> </div>
		<div class="col-md-3">
			<div class="btn-group btn-map-filter">
			<button class="btn btn-default btn-sm" type="button" onclick="indicatorFilter('showfilters')"></span>Filters</button>
			</div>

			<div class="filter-panel panel-group" id="accordion" role="tablist" >
			  <div class="filter-panel panel panel-default">
					<!-- collapse divs go here -->
			  </div>
			</div>
		</div>
	</div>
</header>

<hr>

<table id="progress-indicators"></table>
<!-- <table id="objective-one-indicators"></table>
<table id="objective-two-indicators"></table>
<table id="objective-three-indicators"></table> -->

<hr>
<footer id="site-footer">
	<div class="row row-logo">
				{{{logos}}}
			</div>
</footer>

</div> <!-- / container -->

<script src="//d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script>

$('#accordion').hide();

function getNumber(str){
  return (isNaN(parseFloat(str))) ? 0 : parseFloat(str);
}
var commas = d3.format(",");
var data, filteredData={}, newData=[];

function getProgress(){
  $.ajax({
    type: 'POST',
    url: 'progress',
    dataType: 'JSON'
  }).done(function(response){
		data = response;
    buildPage(response);
  });
}

var objectives = [
	"Philppine Red Cross (PRC) increases their capacity in community-based recovery and preapredness to enhance comunity resilience.",
	"Communities increase their capacity in adopting resilient practices.",
	"Household and community has increased access to safer and sustainable infrastructure and resources."
]

function buildPage(response){
// each objective has its own table
//
	response.forEach(function(d){
		var actual = getNumber(d.actual);
		var target = getNumber(d.target);
		var remainder = (target - actual > 0) ? (target - actual) : 0;
		d.pie = [
			{ label: 'actual', count: actual },
			{ label: 'remainder', count: remainder }
		]
	})

	var indicators = d3.select("#progress-indicators").selectAll('tr').data(response).enter().append('tr');

	var width = 30,
			height = 30,
			radius = Math.min(width, height) / 2,
			arc = d3.svg.arc().outerRadius(radius),
			pie = d3.layout.pie().value(function(d){
				return d.count
			})

	var svg = indicators.append('td').append('svg')
		.attr('class', 'progress-pie')
		.attr('width', width).attr('height', height)
		.append('g').attr('transform', 'translate(' + (width / 2) + ',' + (height / 2) + ')')

	var g = svg.selectAll('g').data(function(d) {
		return pie(d.pie); }).enter().append('path')
		.attr('d', arc)
		.style("fill", function(d) { return (d.data.label === "actual") ? "#8ec06c" : "#d7d7d8"; });

	var description = indicators.append('td');

	description.append('div').text(function(d){ return d.indicator; });

	description.append('div').html(function(d){
		var unitText = (d.unit_of_measure === "Percent") ? "&#37;" : d.unit_of_measure;
		return '<small>' + d.indicator_level + ': &nbsp;&nbsp;<b>' + commas(d.actual) + '</b> ' + unitText + ' of <b>' + commas(d.target) + '</b></small>'
	});
}

function buildFilterHTML(title,options,isLocation){
  var thisBodyHtml = '';

	thisBodyHtml += '<div class="panel-body">';
	$.each(options, function(i, a){
		thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="'+ title + '" value="' + a + '" onchange="buildFilters();">' + a + '</label></div>';
		}
	)
	thisBodyHtml += '</div>';
	$('.filter-panel.panel').append(thisBodyHtml);
}

function indicatorFilter(filter){
	if(filter=="all"){
		clearAllFilters();
		$('#accordion').hide();
	}
	else if(filter=="showfilters"){
		if($('#accordion').is(':visible')){
			clearAllFilters();
			$('#accordion').hide();
		}
		else{
			// Filter by sector
			buildFilterHTML('sectors',['All','Shelter','Livelihood','Water and Sanitation','Health','DRR','M&E','Infrastructure'],false);

			$('.checkbox input:checkbox').click(function() {
				$('.checkbox input:checkbox').not(this).prop('checked', false);
			});

			$('#accordion').show();
		}
	}
}

function clearAllFilters(){
	$('.filter-panel.panel').empty();
  var allCheckboxes = $.find("input:checkbox");
  $.each(allCheckboxes, function(i, box){ $(box).prop('checked',false); });
}

function buildFilters(){
	var activeFilters = [];
	var filter;

	newData =[];

  checkboxes = $(".filter-panel.panel input[type=checkbox]");
    for (i=0; i<checkboxes.length; i++) {
      if(checkboxes[i].checked === true) {
        activeFilters.push({
          filterKey: checkboxes[i].name,
          filterValue: checkboxes[i].value
        })
      }
    }

		filter = activeFilters[0];

		if(filter.filterValue=="All"){
			newData = data;
		}else{
			data.forEach(function (d){
				if(filter.filterValue === d.sector_responsible){
					filteredData[d.indicator_id] =  d;
					newData.push(filteredData[d.indicator_id]);
					}
			})
		}
		$('#progress-indicators').empty();
		buildPage(newData);
}

getProgress();

</script>
