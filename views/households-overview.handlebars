<style>
#map{
  width: 100%;
}
.point {
  r: 3;
  /*fill: #081d58;*/
  fill-opacity: 0.9;
  cursor: pointer;
}

.btn-map-filter {
  position: absolute;
  left: 47px;
  top: 10px;
  z-index: 1;
}

.panel-group{
  position: absolute;
  left: 47px;
  top: 40px;
  z-index: 1;
}

.leaflet-control-attribution a {
  color: #6d6e70 !important;
  cursor: pointer;
}
.clickable{
  cursor: pointer;
}
.leaflet-control-attribution {
  font-size: x-small;
  color: #78787d;
}
.leaflet-control-attribution a {
  text-decoration: none;
  cursor: pointer;
  color: #6d6e70;
}

</style>

<div class="container-fluid" style="margin:0;padding:0;">

  <div id="info-modal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          <h4 class="modal-title">Household Id: <small><span id="modal-hh-id"></span></small></h4>
        </div>
        <div class="modal-body">
          <p>Head of household: <span id="modal-hh-head"></span></p>
          <p># of household members: <span id="modal-hh-total"></span> (<span id="modal-hh-f"></span> <i class="fa fa-female" aria-hidden="true"></i> | <span id="modal-hh-m"></span> <i class="fa fa-male" aria-hidden="true"></i>)</p>
          <p># of elderly: <span id="modal-hh-elderly-f"></span> <i class="fa fa-female" aria-hidden="true"></i> | <span id="modal-hh-elderly-m"></span> <i class="fa fa-male" aria-hidden="true"></i></p>
          <p># of minors: <span id="modal-hh-minor-f"></span> <i class="fa fa-female" aria-hidden="true"></i> | <span id="modal-hh-minor-m"></span> <i class="fa fa-male" aria-hidden="true"></i></p>
          </p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->

<!-- <header class="row header">
	<div class="col-md-12">
		<h1>Households overview</h1>
	</div>
</header>

<hr> -->
<div class="btn-group btn-map-filter" role="button">
  <button class="btn btn-default btn-sm" type="button" onclick="filtermap('all');"></span>Show all</button>
<button class="btn btn-default btn-sm" type="button" onclick="filtermap('addfilters');"></span>Filters</button>
</div>

<div class="filter-panel panel-group" id="accordion" role="tablist" >
  <div class="filter-panel panel panel-default">
    <div class="filter-panel panel-heading" role="tab">
			<!-- panel titles go here -->
    </div>
		<!-- collapse divs go here -->
  </div>
</div>

<div id="map"></div>


<!-- <hr>
<footer id="site-footer">
	<div class="row row-logo">
				{{{logos}}}
			</div>
</footer> -->

</div> <!-- / container -->

<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />
<script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>
<script src="//d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script>

var height = $(window).height();
$('#map').height(height);
$(window).resize(function(){
  height = $(window).height();
  $('#map').height(height);
})

var data, points;

// create basic leaflet map
// ========================
// tile layer for base map
var hotUrl = 'http://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',
  hotAttribution = '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, Tiles from <a href="http://hot.openstreetmap.org/" target="_blank">H.O.T.</a>',
  hotLayer = L.tileLayer(hotUrl, {attribution: hotAttribution});
// initialize map w options
var map = L.map('map', {
  layers: [hotLayer],
  center: new L.LatLng(0,0),
  zoom: 2,
  minZoom: 2
});

var mapBounds = L.latLngBounds([10.714586690981509,124.71954345703126],[11.321173722096153,126.28509521484375])
map.fitBounds(mapBounds);

// initialize the SVG layer for D3 drawn survey points
map._initPathRoot()

// pick up the SVG from the map object
var svg = d3.select("#map").select("svg");
var pointsGroup = svg.append('g').attr("id", "markers");

function projectPoint(x, y) {
  var point = map.latLngToLayerPoint(new L.LatLng(y, x));
  this.stream.point(point.x, point.y);
}

var transform = d3.geo.transform({point: projectPoint}),
    path = d3.geo.path().projection(transform);



function getHouseholds(){
	$.get('query/hhlocations', function(response){
		data = response;
		drawPoints();Â 
	});
}

function drawPoints(){
	points = pointsGroup.selectAll("circle")
    .data(data).enter().append("circle")
    .classed('point', true)
    .attr('fill', function(d){
      if(d.core !== null){
        return "#7570b3";
      } else if (d.sra !== null) {
        return "#1b9e77";
      } else {
        return "#d95f02";
      }
    })
    .on('click', function(d){ clickedHousehold(d, this); })

  // when map view changes adjust the locations of the svg circles
	function updatePoint(){
		points.attr("cx",function(d) {
			return map.latLngToLayerPoint([d.lat,d.lng]).x
		});
		points.attr("cy",function(d) {
			return map.latLngToLayerPoint([d.lat,d.lng]).y
		});
	}
	map.on("viewreset", updatePoint);
	updatePoint();
}

function clickedHousehold(data, target){
  $.post('query/hhoverview', {"id": data.id}, function(response){
    // # response should be an array containing one object
    if(response[0]){
      var head = response[0].head_of_hh_fname;
      head += (response[0].head_of_hh_mname === null) ? " " : " " + response[0].head_of_hh_mname + " ";
      head += response[0].head_of_hh_lname;
      $("#modal-hh-id").empty().text(response[0].household_id);
      $("#modal-hh-head").empty().text(head);
      $("#modal-hh-total").empty().text(response[0].num_of_members);
      $("#modal-hh-f").empty().text(response[0].num_of_females);
      $("#modal-hh-m").empty().text(response[0].num_of_males);
      $("#modal-hh-elderly-f").empty().text(response[0].vul_female_elderly);
      $("#modal-hh-elderly-m").empty().text(response[0].vul_male_elderly);
      $("#modal-hh-minor-f").empty().text(response[0].vul_female_minor);
      $("#modal-hh-minor-m").empty().text(response[0].vul_male_minor);
      $("#info-modal").modal();
    } else {
      $("#modal-hh-id").empty().html("<i>Sorry, an error occurred.</i>");
      $("#modal-hh-head").empty();
      $("#modal-hh-total").empty();
      $("#modal-hh-f").empty();
      $("#modal-hh-m").empty();
      $("#modal-hh-elderly-f").empty();
      $("#modal-hh-elderly-m").empty();
      $("#modal-hh-minor-f").empty();
      $("#modal-hh-minor-m").empty();
      $("#info-modal").modal();
    }
  });
}

var locationLookup = {};

function getLocationData(){
  $.get('query/targetlocations', function(response){
    $.each(response, function(index, location){
      locationLookup[location.location_id] = location;
      locationLookup[location['location_id'].slice(0,2)] = location;
    });
  });
}

var filterTitles = [];
var filterOptions = [];

function buildFilterHTML(title,titleName,options,isLocation){

  var titleHTML = '';
  var thisBodyHtml = '';

  // add filter title to Filter Title panel
  titleHTML = '<span class="panel-title">' + '<a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapse-' + titleName + '" aria-expanded="false"            aria-controls="collapse' + titleName + '">' + title + '</a></span>';

  filterTitles.push(titleHTML);

// add add collapsible panel to filter title
  thisBodyHtml = '<div id="collapse-' + titleName + '" class="collapse" role="tabpanel">' + '<div class="panel-body">';

// revise THIS and instead use only locationLookup
  if(isLocation === true) {
    var municipArray = [];
    $.each(options, function(i, a){
      var thisMunicip = a.slice(0,2);
      if($.inArray(thisMunicip, municipArray) === -1 && locationLookup[thisMunicip] !== undefined){
        municipArray.push(thisMunicip);
        thisBodyHtml += (municipArray.length > 0) ? '<br>' : '';
        thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' + thisMunicip + '" onchange="buildFilters();"><strong>' + locationLookup[thisMunicip].municipality + '<strong></label></div>';
      }
      if(locationLookup[a] === undefined){
        thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' + a + '" onchange="buildFilters();">' + 'data error' + '</label></div>';
      }
      else {
        thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' + a + '" onchange="buildFilters();">' + locationLookup[a].barangay + '</label></div>';
      }
    })
  } else{
    $.each(options, function(i, a){
      // add checkbox for each option
      thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="'+ titleName + '" value="' + a + '" onchange="buildFilters();">' + a + '</label></div>';
    })
  }
  // close collapsible options panel
  thisBodyHtml += '</div>' + '</div>';

    //add options to filter panel
  $('.filter-panel.panel').append(thisBodyHtml);
}

function filtermap(wat){

  if(wat=="all"){
    points.classed("hide", false);
    closeFilterBox();
    }

  else if (wat=="addfilters"){

    if($('#accordion').is(':visible')){
      closeFilterBox();
    }
    else{

      filterTitles = [];
      filterOptions = [];

      buildFilterHTML('Shelter','shelter',['Core','SRA'],false);
      buildFilterHTML('Livelihood','livelihood',['CCG','STED','Agriculture Extension'],false);

      $('.filter-panel.panel-heading').html(filterTitles.join('&nbsp; | &nbsp;'));

      // only one checkbox can be selected
      $('.checkbox input:checkbox').click(function() {
        $('.checkbox input:checkbox').not(this).prop('checked', false);
      });
      $('#accordion').show();
    }
  }
}

function closeFilterBox(){
      clearAllFilters();
      $('#accordion').hide();
}

function clearAllFilters(){
  var allCheckboxes = $.find("input:checkbox");
  $.each(allCheckboxes, function(i, box){ $(box).prop('checked',false); });

}

function buildFilters(){

  //check which checkboxes are selected
  var activeFilters = []
  checkboxes = $(".filter-panel.panel input[type=checkbox]");
    for (i=0; i<checkboxes.length; i++) {
      if(checkboxes[i].checked === true) {
        activeFilters.push({
          filterKey: checkboxes[i].name,
          filterValue: checkboxes[i].value
        })
      }
    }

  // show filter panel
  if(activeFilters[0].filterValue == "Core"){
    points.classed("hide", true).filter(function(d){ return d.core !== null }).classed("hide", false);
  }
  else if(activeFilters[0].filterValue === "SRA"){
    points.classed("hide", true).filter(function(d){ return d.sra !== null }).classed("hide", false);
  }
}

$('#accordion').hide();

getLocationData();
getHouseholds()

</script>
