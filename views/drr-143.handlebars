<div id="rc143-page">

<div class="row">
	<div class="columns">
		<h2>Red Cross 143 Volunteers</h2>
	</div>
</div>

<br>

<div class="row">
  <div class="columns">
    <div id="loader" class="text-center">
    	<img src="{{opts.nginxlocation}}media/ajax_loader_gray_512.gif" alt="loading..." />
    </div>
    <p>
      <u>ACTIVE FILTERS</u>: <span id="filter-active-text"></span><br>
      <a onclick="clearAllCheckboxes();"><i class="fa fa-trash-o"></i> clear ALL filters</a>
    </p>
    <ul class="tabs" data-active-collapse="true" data-tabs id="filter-nav">
    	<!-- panel titles go here -->
    </ul>
    <div class="tabs-content" data-tabs-content="filter-nav" id="filter-nav-tabs">
      <!-- collapse divs go here -->
    </div>
  </div>
</div>
<br>

<div class="row">
  <div class="columns">
	   <div id="brgyBars"></div>
  </div>
</div>

<br>

<div class="row">
	<div class="small-6 columns">
    <h4>Volunteer Status</h4>
	 	<div class="small-8 columns"> <div id="statusPie"></div></div>
		<div class="small-4 columns"> <div id="statusLegend"></div></div>
	</div>
	<div class="small-6 columns">
    <h4>Number of trainings attended</h4>
	 	<div class="small-8 columns"> <div id="trainingAttendedPie"></div></div>
		<div class="small-4 columns"> <div id="trainingAttendedLegend"></div></div>
	</div>
</div>

<br>

<div class="row">
	<div class="columns">
    <h4>RC 143 Volunteer Participation Summary</h4>
		<div id="perTopicLegend"></div>
		<div id="perTopicBarGraph"></div>
	 </div>
</div>

<br>

<div class="row">
  <div class="columns">
      <div id="listTable"></div>
  </div>
</div>

</div><!-- / container -->

<br>
{{> page/footer}}

<link rel="stylesheet" href="//cdn.datatables.net/1.10.13/css/jquery.dataTables.min.css">
<style>
  /* because we want dark grey not blue sort arrows */
  table.dataTable thead .sorting_asc { background-image: url("{{opts.nginxlocation}}media/sort_asc.png"); }
  table.dataTable thead .sorting_desc { background-image: url("{{opts.nginxlocation}}media/sort_desc.png"); }
</style>
<script src="//cdn.datatables.net/1.10.13/js/jquery.dataTables.min.js"></script>
<script>

var data, filteredData;
var locationLookup = {};

var commaSeperator = d3.format(",");

function adminText(locationId, type){
  if(locationLookup[locationId] === undefined){ return "no data"}
  else if (type === "muni") {
    return locationLookup[locationId].municipality;
  } else if (type === "brgy") {
    return locationLookup[locationId].barangay;
  } else { return "error" }
}


d3.select(window).on("resize", throttle);
var throttleTimer;
function throttle() {
  window.clearTimeout(throttleTimer);
    throttleTimer = window.setTimeout(function() {
      resize();
    }, 200);
}
function resize() {
  d3.select('#brgyBars').select("svg").remove();
	d3.select('#statusPie').select("svg").remove();
	d3.select('#trainingAttendedPie').select("svg").remove();
	d3.select('#perTopicBarGraph').select("svg").remove();

  buildBars();
}

function clearAllCheckboxes(){
  var allCheckboxes = $.find("input:checkbox");
  $.each(allCheckboxes, function(i, box){ $(box).prop('checked',false); });
  filter();
}

function getLocationData(){
  $.get('{{opts.nginxlocation}}api/pages/targetlocations', function(response){
    $.each(response, function(index, location){
      locationLookup[location.location_id] = location;
      locationLookup[location['location_id'].slice(0,2)] = location;
    });
    fetchData();
  });
}

var topicsList=[];

function fetchData(){
  $.get('{{opts.nginxlocation}}api/pages/rc143', function(response){
    data = response;
    var counter = 0;

		topicsList['CMDRR'] = {title:"Community-Managed DRR", key:"CMDRR"};
		topicsList['CP'] = {title:"Contingency Planning", key:"CP"};
		topicsList['HP'] = {title:"Household-Level DP", key:"HP"};

    data.forEach(function(d){

			d['location_id'] = [d['household_id'].slice(0,5)];
      d['location'] = [d['household_id'].slice(0,2), d['household_id'].slice(0,5)];
			d['training_attended'] = [d['cmdrr'], d['cp'], d['hp']];
			d['status'] = [d['status']];

			d['training_count']=0;
			d['training_attended'].forEach(function(a){ if(a != null){ d['training_count']++; }});

			counter++;
      if(counter === data.length){ buildFilters(); }
    });
  });
}

function buildFilters(){
  // # get the unique values from the data for all our filter fields
   var trainingArray = [], locationArray = [], statusArray = [], trainingcountArray = [];

  $.each(data, function(i,item){
    item['location_id'].forEach(function(d){ if($.inArray(d, locationArray) === -1){ locationArray.push(d) }});
		item['training_attended'].forEach(function(d){ if($.inArray(d, trainingArray) === -1 && d != null){ trainingArray.push(d) }});
		item['status'].forEach(function(d){ if($.inArray(d, statusArray) === -1 && d != null){ statusArray.push(d) }});
		if($.inArray(item['training_count'], trainingcountArray) === -1 && item['training_count'] != null){ trainingcountArray.push(item['training_count']); };
  });
  // # alphabetize them arrays
	trainingArray.sort(d3.ascending);
	statusArray.sort(d3.ascending);
	trainingcountArray.sort(d3.ascending);
	locationArray.sort(function(a, b) { return a - b; });

  // # build the html and add it to the page
  var panelTitles = [];
    // var panelBodies = [];
    function panelHtml(title, dataId, array, geo){
      var thisTitleHtml = '<li class="tabs-title">' +
        '<a href="#' + dataId + '">' + title + '</a></li>';
      panelTitles.push(thisTitleHtml);
      var thisBodyHtml = '<div class="tabs-panel" id="' + dataId + '">';
      if(geo === true) {
        var municipArray = [];
        $.each(array, function(i, a){
          var thisMunicip = a.slice(0,2);
          if($.inArray(thisMunicip, municipArray) === -1 && locationLookup[thisMunicip] !== undefined){
            municipArray.push(thisMunicip);
            thisBodyHtml += (municipArray.length > 0) ? '<br>' : '';
            thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
                thisMunicip + '" onchange="filter();"><strong>' + locationLookup[thisMunicip].municipality + '<strong></label></div><br>';
          }
          if(locationLookup[a] === undefined){ thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
              a + '" onchange="filter();">' + 'data error' + '</label></div>'; }
          else { thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
              a + '" onchange="filter();">' + locationLookup[a].barangay + '</label></div>'; }
        })
      } else {
        $.each(array, function(i, a){
          thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="'+
              dataId + '" value="' + a + '" onchange="filter();">' + a + '</label></div>';
        })
      }
      thisBodyHtml += '</div>';
      $('#filter-nav-tabs').append(thisBodyHtml);

    }
    panelHtml('Training', 'training_attended', trainingArray,false);
		panelHtml('Location', 'location', locationArray, true);
		panelHtml('Status', 'status', statusArray, false);
    $('#filter-nav').append(panelTitles);
    Foundation.reInit($('#filter-nav'))
    filteredData = data;
    $('#loader').hide();
    buildBars();

}

function filter(){
  // # look at all the checkboxes and record whats checked
  activeFilters = []
  checkboxes = $("#filter-nav-tabs input[type=checkbox]");
    for (i=0; i<checkboxes.length; i++) {
      if(checkboxes[i].checked === true) {
        activeFilters.push({
          filterKey: checkboxes[i].name,
          filterValue: checkboxes[i].value
        })
      }
    }
  // # reformat the data on checks to make it easier to work with
  // ? combine this into what's above
  filterData = d3.nest().key(function(d){ return d.filterKey })
    .rollup(function(value){
      var valuesArray = [];
      value.forEach(function(d){
        valuesArray.push(d.filterValue);
      });
      return valuesArray;
    }).entries(activeFilters)
  // # update the html on the page to let the user know what filters are active
  var keyGroups = [];
  $.each(filterData,function(i,filterKey){
    var keyGroupHtml = '(<b>' + filterKey.key + '</b> <small>=</small> ';
    var valueGroups = [];
    $.each(filterKey.value, function(j,filterValue){
      valueGroups.push('<b>' + filterValue + '</b>');
    })
    keyGroupHtml += valueGroups.join(" <small>OR</small> ") + ")"
    keyGroups.push(keyGroupHtml);
  });
  $('#filter-active-text').html(keyGroups.join(" <small>AND</small> "));
  // # filter the data
  var filterKeyCount = filterData.length;
  filteredData = data.filter(function(d){
    var passCount = 0;
    var project = d;
    $.each(filterData,function(iKey, filterKey){
      var pass = false;
      var thisKey = filterKey.key;
      $.each(filterKey.value, function(iValue, filterValue){
        // # if any of the filter values for a given key are present, that filter key is passed
        if($.inArray(filterValue, project[thisKey]) !== -1){ pass = true; }
      });
      if(pass === true){ passCount ++; }
    });
    // # if all filter keys are passed, the project passes the filtering
    return passCount === filterKeyCount;
  })
  console.log(filteredData.length)

  drawBars();
}

var brgyBarsMeas, brgyBars, brgyBarsX;
function buildBars(){
  brgyBarsMeas = {top: 20, right: 50, bottom: 20, left: 170, barHeight: 20, width: $('#brgyBars').innerWidth()};
  brgyBars = d3.select('#brgyBars').append('svg')
      .attr("width", brgyBarsMeas.width)

  brgyBarsX = d3.scaleLinear()
      .range([0, brgyBarsMeas.width - brgyBarsMeas.left - brgyBarsMeas.right])
	// drawBars();
	buildPies();
}

var topicBarsMeas, topicBars, topicBarsX;
function buildGraphs(){

	topicBarsMeas = {top: 20, right: 50, bottom: 20, left: 170, barHeight: 20, width: $('#perTopicBarGraph').innerWidth()};
  topicBars = d3.select('#perTopicBarGraph').append('svg').attr("width", topicBarsMeas.width)
  topicBarsX = d3.scaleLinear().range([0, topicBarsMeas.width - topicBarsMeas.left - topicBarsMeas.right])

	drawBars();
}

function drawBars(){
  // get sum of grants per brgy
  var brgyBarsData = d3.nest()
    .key(function(d) { if(d['location_id'] === null){ return 'data missing'} else { return d['location_id']; } })
    .rollup(function(value) { return value.length; })
    .entries(filteredData);

  brgyBarsX.domain([0, d3.max(brgyBarsData, function(d) { return d.value; })]);

  brgyBars.attr("height", brgyBarsMeas.barHeight * brgyBarsData.length);

  var barEnter = d3.select('#brgyBars').select('svg').selectAll("g")
      .data(brgyBarsData, function(d){ return d['key']; })

  barEnter.exit().remove();

  barEnter.enter().append("g").each(function(d){
    d3.select(this).append('rect')
      .attr("height", brgyBarsMeas.barHeight - 1)
    d3.select(this).append("text")
      .attr("class","brgy-label")
      .attr("x", -5)
      .attr("y", brgyBarsMeas.barHeight / 2)
      .attr("dy", ".35em")
    d3.select(this).append("text")
      .attr("class","brgy-total")
      .attr("y", brgyBarsMeas.barHeight / 2)
      .attr("dy", ".35em")
  });

  var barUpdate = d3.select('#brgyBars').select('svg').selectAll("g");
  barUpdate.sort(function(a, b) { return b.value - a.value; })
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("transform", function(d, i) { return "translate(" + brgyBarsMeas.left + "," + i * brgyBarsMeas.barHeight + ")"; });
  barUpdate.select("rect")
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("width", function(d) { return brgyBarsX(d.value); })
  barUpdate.select(".brgy-label")
    .text(function(d) {
      if(locationLookup[d.key] === undefined){ return d.key; }
      else { return locationLookup[d.key].barangay + ", " + locationLookup[d.key].municipality; }
    });
  barUpdate.select(".brgy-total")
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("x", function(d) { return brgyBarsX(d.value) + 3; })
    .text(function(d) { return d.value; });

		drawPies();
		// buildList();
}

function drawGraphs(){
	/////////////////////
  // TOPIC BAR GRAPH //
  // ############### //
  /////////////////////

	var topicBarsData = d3.nest().key(function(d){return d['training_attended'];}).rollup(function(d){ return d.length;}).entries(filteredData);

  topicBarsX.domain([0, d3.max(topicBarsData, function(d) { return d.value; })]);

  topicBars.attr("height", topicBarsMeas.barHeight * topicBarsData.length)

	var barEnter = d3.select('#perTopicBarGraph').select('svg').selectAll("g").data(topicBarsData, function(d){ return d['key']; })

  barEnter.exit().remove();

  barEnter.enter().append("g").each(function(d){
    d3.select(this).append('rect').attr("height", topicBarsMeas.barHeight - 1).attr("fill", "#c11b2b")

		d3.select(this).append("text").attr("class","topic-label").attr("font-size","11px").attr("font-family","inherit").attr("x", -5).attr("y", topicBarsMeas.barHeight / 2)
      .attr("dy", ".35em").attr("text-anchor","end").attr("fill","black")

		d3.select(this).append("text").attr("class","topic-total").attr("font-size","11px").attr("font-family","inherit").attr("y", topicBarsMeas.barHeight / 2)
      .attr("dy", ".35em").attr("text-anchor","start").attr("fill","black")
  });

  var barUpdate = d3.select('#perTopicBarGraph').select('svg').selectAll("g");

	barUpdate.sort(function(a, b) { return b.value - a.value; })
    .transition().duration(1000).ease(d3.easeLinear).attr("transform", function(d, i) { return "translate(" + topicBarsMeas.left + "," + i * topicBarsMeas.barHeight + ")"; });

	barUpdate.select("rect").transition().duration(1000).ease(d3.easeLinear).attr("width", function(d) { return topicBarsX(d.value); })

	barUpdate.select(".topic-label")
    .text(function(d) {
			if(topicsList[d.key] === undefined){ return d.key; }
      else { return topicsList[d.key].title; }
    });

	barUpdate.select(".topic-total").transition().duration(1000).ease(d3.easeLinear).attr("x", function(d) { return topicBarsX(d.value) + 3; }).text(function(d) { return d.value; });

	buildList();
}

var pieRadius, statusPie, statusPiePath, trainingAttendedPie, trainingAttendedPiePath;
function buildPies(){

  var widthOnPage = $('#statusPie').innerWidth();
  var width = (widthOnPage < 300) ? widthOnPage : 300;
  var height = width;
  pieRadius = Math.min(width, height) / 2;

  statusPie = d3.select('#statusPie').append("svg")
      .attr("width", width)
      .attr("height", height)
    .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
  statusPiePath = statusPie.selectAll("path");

	trainingAttendedPie = d3.select('#trainingAttendedPie').append("svg")
      .attr("width", width)
      .attr("height", height)
    .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
  trainingAttendedPiePath = trainingAttendedPie.selectAll("path");

	buildGraphs();
};

function drawPies(){
	/////////////////
  // PIE HELPERS //
  // ########### //
  /////////////////
  function findNeighborArc(i, data0, data1, key) {
    var d;
    return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}
    : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}
    : null;
  }
  // # Find the element in data0 that joins the highest preceding element in data1.
  function findPreceding(i, data0, data1, key) {
    var m = data0.length;
    while (--i >= 0) {
      var k = key(data1[i]);
      for (var j = 0; j < m; ++j) {
        if (key(data0[j]) === k) return data0[j];
      }
    }
  }
  // # Find the element in data0 that joins the lowest following element in data1.
  function findFollowing(i, data0, data1, key) {
    var n = data1.length, m = data0.length;
    while (++i < n) {
      var k = key(data1[i]);
      for (var j = 0; j < m; ++j) {
        if (key(data0[j]) === k) return data0[j];
      }
    }
  }

  function key(d) {
    return d.data.key

  }

  var pie = d3.pie().sort(null).value(function(d) { return d.value; });

  var path = d3.arc()
        .outerRadius(pieRadius - 10)
        .innerRadius(0);

  arcTween = function(d) {
    var i = d3.interpolate(this._current, d);
    this._current = i(0);
    return function(t) { return path(i(t)); };
  }

	/////////////////////////
  // ACTIVE/INACTIVE PIE //
  // ################### //
  /////////////////////////
  var statusColor = d3.scaleOrdinal(d3.schemeCategory20).domain(data.map(function(d) { return d['status']; }))

  var statusPieData = d3.nest()
    .key(function(d) { return d['status']; })
    .rollup(function(value){
      return value.length
    })
    .entries(filteredData)

  var statusData0 = statusPiePath.data(),
    statusData1 = pie(statusPieData);

  statusPiePath = d3.select('#statusPie').select('svg').select('g').selectAll('path').data(statusData1, key);

  statusPiePath.enter().append("path")
    .each(function(d, i) { this._current = findNeighborArc(i, statusData0, statusData1, key) || d; })
    .attr("fill", function(d) { return statusColor(d.data.key); })
    .attr('d', path)
  .append("title")
    .text(function(d) { return d.data.key; });


		statusPiePath.exit().remove();

	  statusPiePath.transition().duration(750).attrTween("d", arcTween);

	  // Legend
	  var statusLegend = d3.select('#statusLegend').selectAll('div').data(statusPieData, function(d) { return d['key']; });
	  // UPDATE
	  statusLegend.html(function(d){ return '<i class="fa fa-square" style="color:' + statusColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.value + ')</small>'; })
	  // ENTER
	  statusLegend.enter().append('div').attr('class', "legend-item")
	  .html(function(d){ return '<i class="fa fa-square" style="color:' + statusColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.value + ')</small>'; })
	  // REMOVE
	  statusLegend.exit().remove();
	  // sort
	  statusLegend.sort(function(a, b) { return b.value - a.value; })

		/////////////////////////
	  // TRAINING COUNT PIE //
	  // ################### //
	  /////////////////////////

	  var trainingAttendedColor = d3.scaleOrdinal(d3.schemeCategory20).domain(data.map(function(d) { return d['training_count']; }))

	  var trainingAttendedPieData = d3.nest()
	    .key(function(d) { return d['training_count']; })
	    .rollup(function(value){
	      return value.length
	    })
	    .entries(filteredData)

	  var trainingAttendedData0 = trainingAttendedPiePath.data(),
	    trainingAttendedData1 = pie(trainingAttendedPieData);

	  trainingAttendedPiePath = d3.select('#trainingAttendedPie').select('svg').select('g').selectAll('path').data(trainingAttendedData1, key);

	  trainingAttendedPiePath.enter().append("path")
	    .each(function(d, i) { this._current = findNeighborArc(i, trainingAttendedData0, trainingAttendedData1, key) || d; })
	    .attr("fill", function(d) { return trainingAttendedColor(d.data.key); })
	    .attr('d', path)
	  .append("title")
	    .text(function(d) { return d.data.key; });


			trainingAttendedPiePath.exit().remove();

		  trainingAttendedPiePath.transition().duration(750).attrTween("d", arcTween);

		  // Legend
		  var trainingAttendedLegend = d3.select('#trainingAttendedLegend').selectAll('div').data(trainingAttendedPieData, function(d) { return d['key']; });
		  // UPDATE
		  trainingAttendedLegend.html(function(d){ return '<i class="fa fa-square" style="color:' + trainingAttendedColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.value + ')</small>'; })
		  // ENTER
		  trainingAttendedLegend.enter().append('div').attr('class', "legend-item")
		  .html(function(d){ return '<i class="fa fa-square" style="color:' + trainingAttendedColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.value + ')</small>'; })
		  // REMOVE
		  trainingAttendedLegend.exit().remove();
		  // sort
		  trainingAttendedLegend.sort(function(a, b) { return b.value - a.value; })

	drawGraphs();
}

function buildList(){

  $('#listTable').empty();
  $('#listTable').html('<table data-sortable id="dataTable" class="compact stripe cell-border" cellspacing="0">' +
        '<thead>'+
          '<tr><th>HH ID<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>First<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Last<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Barangay<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Municipality<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Community Managed DRR<br><input class="column-search" type="search" placeholder="search..." /></th>'+
					'<th>Contingency Planning<br><input class="column-search" type="search" placeholder="search..." /></th>'+
					'<th>Household DP Planning<br><input class="column-search" type="search" placeholder="search..." /></th>'+
        '</thead>'+
        '<tbody></tbody></table>');
  $.each(filteredData, function(i,d){
    var rowHtml = '<tr>' +
      '<td>' + d['household_id'] + '</td>' +
      '<td>' + d['member_fname'] + '</td>' +
      '<td>' + d['member_lname'] + '</td>' +
      '<td>' + adminText(d.location_id, 'brgy') + '</td>' +
      '<td>' + adminText(d.location_id, 'muni') + '</td>';
			d['training_attended'].indexOf("CMDRR")>-1 ? rowHtml += '<td>Yes</td>' : rowHtml += '<td>No</td>';
			d['training_attended'].indexOf("CP")>-1 ? rowHtml += '<td>Yes</td>' : rowHtml += '<td>No</td>';
			d['training_attended'].indexOf("HP")>-1 ? rowHtml += '<td>Yes</td>' : rowHtml += '<td>No</td>';
			rowHtml += '</tr>';
    	$('#listTable tbody').append(rowHtml);
  });


  var table = $('#dataTable').DataTable({
      // scrollX: true,
      "sDom":'lrtip',
      "lengthChange": false,
      "pageLength": 10,
      // "lengthMenu": [ 10, 50, 100 ],
      "language": {
        "lengthMenu": "Display _MENU_ records",
        "info": "Showing _START_ to _END_ of _TOTAL_ records",
      }
    });

    // stop a click in the search input box from triggering a sort on the column
    $('.column-search').on('click', function(e){
      e.stopPropagation();
    });

    // initialize column search functionality
    table.columns().every( function() {
      var that = this;
      $('input', this.header() ).on('keyup change', function(){
        if( that.search() !== this.value ){
          that
          .search( this.value )
          .draw();
        }
      });
    });

}

getLocationData();
</script>
