<div id="latrine-sra-page">


  <div id="details-modal" class="reveal" data-reveal>
    <button class="close-button" data-close aria-label="Close modal" type="button"><span aria-hidden="true">&times;</span></button>
    <h4 class="modal-title">Household Id: <small><span id="modal-hh-id"></span></small></h4>
    <div class="modal-body">
      <p></p>
      <div style="width:49%;display:inline-block;"><img src="" class="img-before"></div>
      <div style="width:49%;display:inline-block;"><img src="" class="img-after"></div>
    </div>
  </div>

<div class="row">
	<div class="columns">
		<h2>SRA Latrines</h2>
	</div>
</div>

<br>

<div class="row">
  <div class="columns">
    <div id="loader" class="text-center">
    	<img src="{{opts.nginxlocation}}media/ajax_loader_gray_512.gif" alt="loading..." />
    </div>
    <p>
      <u>ACTIVE FILTERS</u>: <span id="filter-active-text"></span><br>
      <a onclick="clearAllCheckboxes();"><i class="fa fa-trash-o"></i> clear ALL filters</a>
    </p>
    <ul class="tabs" data-active-collapse="true" data-tabs id="filter-nav">
    	<!-- panel titles go here -->
    </ul>
    <div class="tabs-content" data-tabs-content="filter-nav" id="filter-nav-tabs">
      <!-- collapse divs go here -->
    </div>
  </div>
</div>
<br>

<div class="row">
  <div class="columns">
	   <div id="brgyBars"></div>
  </div>
</div>

<br>

<div class="row">
  <div class="columns">
    <h3>SRA Latrines completed by date</h3>
    <div id="progressGraph" style="width: 100%; font: 10px sans-serif;"></div>
  </div>
</div>

<br>

<div class="row">
  <div class="columns">
      <div id="listTable"></div>
  </div>
</div>

</div><!-- / container -->

<br>
{{> page/footer}}


<link rel="stylesheet" href="//cdn.datatables.net/1.10.13/css/jquery.dataTables.min.css">
<style>
  /* because we want dark grey not blue sort arrows */
  table.dataTable thead .sorting_asc { background-image: url("{{opts.nginxlocation}}media/sort_asc.png"); }
  table.dataTable thead .sorting_desc { background-image: url("{{opts.nginxlocation}}media/sort_desc.png"); }
</style>
<script src="//cdn.datatables.net/1.10.13/js/jquery.dataTables.min.js"></script>
<script>
var data, filteredData;
var locationLookup = {};

var commaSeperator = d3.format(",");

function adminText(locationId, type){
  if(locationLookup[locationId] === undefined){ return "no data"}
  else if (type === "brgy") {
    return locationLookup[locationId].barangay;
  } else if (type === "muni") {
    return locationLookup[locationId].municipality;
  } else { return "error" }
}

d3.select(window).on("resize", throttle);
var throttleTimer;
function throttle() {
  window.clearTimeout(throttleTimer);
    throttleTimer = window.setTimeout(function() {
      resize();
    }, 200);
}
function resize() {
  d3.select('#brgyBars').select("svg").remove();
  d3.select('#progressGraph').select("svg").remove();

  buildBars();
}

function clearAllCheckboxes(){
  var allCheckboxes = $.find("input:checkbox");
  $.each(allCheckboxes, function(i, box){ $(box).prop('checked',false); });
  filter();
}

function getLocationData(){
  $.get('{{opts.nginxlocation}}api/pages/targetlocations', function(response){
    $.each(response, function(index, location){
      locationLookup[location.location_id] = location;
      locationLookup[location['location_id'].slice(0,2)] = location;
    });
    fetchData();
  });
}

function fetchData(){
  $.get('{{opts.nginxlocation}}api/pages/latrine-sra', function(response){
    data = response;
		var counter = 0;
    data.forEach(function(d){
      // # for the filter to work all the filtered data values need to be arrays even if all possibilities are just 1 value
      // # this is keeping the option of filtering on 'proposed_items' open which is a comma seperated data field
      d['location_id'] = (d['hh_id'] === null) ? 'data missing' : d['hh_id'].slice(0,5);
      d['location'] = (d['hh_id'] === null) ? ['data missing','data missing'] : [d['hh_id'].slice(0,2), d['hh_id'].slice(0,5)];
      counter++;
      if(counter === data.length){ buildFilters(); }
    });
  });
}

function buildFilters(){
  // # get the unique values from the data for all our filter fields
  var locationArray = [];
  $.each(data, function(i,item){
    if($.inArray(item['location_id'], locationArray) === -1){ locationArray.push(item['location_id']) }
  });

  // # alphabetize them arrays
  locationArray.sort(function(a, b) { return a - b; });

  // # build the html and add it to the page
  var panelTitles = [];
    // var panelBodies = [];
    function panelHtml(title, dataId, array, geo){
      var thisTitleHtml = '<li class="tabs-title">' +
        '<a href="#' + dataId + '">' + title + '</a></li>';
      panelTitles.push(thisTitleHtml);
      var thisBodyHtml = '<div class="tabs-panel" id="' + dataId + '">';
      if(geo === true) {
        var municipArray = [];
        $.each(array, function(i, a){
          var thisMunicip = a.slice(0,2);
          if($.inArray(thisMunicip, municipArray) === -1 && locationLookup[thisMunicip] !== undefined){
            municipArray.push(thisMunicip);
            thisBodyHtml += (municipArray.length > 0) ? '<br>' : '';
            thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
                thisMunicip + '" onchange="filter();"><strong>' + locationLookup[thisMunicip].municipality + '<strong></label></div><br>';
          }
          if(locationLookup[a] === undefined){ thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
              a + '" onchange="filter();">' + 'data error' + '</label></div>'; }
          else { thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
              a + '" onchange="filter();">' + locationLookup[a].barangay + '</label></div>'; }
        })
      } else {
        $.each(array, function(i, a){
          thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="'+
              dataId + '" value="' + a + '" onchange="filter();">' + a + '</label></div>';
        })
      }
      thisBodyHtml += '</div>';
      $('#filter-nav-tabs').append(thisBodyHtml);

    }
    panelHtml('Location', null, locationArray, true);
    $('#filter-nav').append(panelTitles);
    Foundation.reInit($('#filter-nav'))
    filteredData = data;
    $('#loader').hide();
    buildBars();

}

function filter(){
  // # look at all the checkboxes and record whats checked
  activeFilters = []
  checkboxes = $("#filter-nav-tabs input[type=checkbox]");
    for (i=0; i<checkboxes.length; i++) {
      if(checkboxes[i].checked === true) {
        activeFilters.push({
          filterKey: checkboxes[i].name,
          filterValue: checkboxes[i].value
        })
      }
    }
  // # reformat the data on checks to make it easier to work with
  // ? combine this into what's above
  filterData = d3.nest().key(function(d){ return d.filterKey })
    .rollup(function(values){
      var valuesArray = [];
      values.forEach(function(d){
        valuesArray.push(d.filterValue);
      });
      return valuesArray;
    }).entries(activeFilters)
  // # update the html on the page to let the user know what filters are active
  var keyGroups = [];
  $.each(filterData,function(i,filterKey){
    var keyGroupHtml = '(<b>' + filterKey.key + '</b> <small>=</small> ';
    var valueGroups = [];
    console.log(filterKey)
    $.each(filterKey.value, function(j,filterValue){
      valueGroups.push('<b>' + filterValue + '</b>');
    })
    keyGroupHtml += valueGroups.join(" <small>OR</small> ") + ")"
    keyGroups.push(keyGroupHtml);
  });
  $('#filter-active-text').html(keyGroups.join(" <small>AND</small> "));
  // # filter the data
  var filterKeyCount = filterData.length;
  filteredData = data.filter(function(d){
    var passCount = 0;
    var project = d;
    $.each(filterData,function(iKey, filterKey){
      var pass = false;
      var thisKey = filterKey.key;
      $.each(filterKey.value, function(iValue, filterValue){
        // # if any of the filter values for a given key are present, that filter key is passed
        if($.inArray(filterValue, project[thisKey]) !== -1){ pass = true; }
      });
      if(pass === true){ passCount ++; }
    });
    // # if all filter keys are passed, the project passes the filtering
    return passCount === filterKeyCount;
  })
  console.log(filteredData.length)

  drawBars()

}


var brgyBarsMeas, brgyBars, brgyBarsX;
function buildBars(){
  brgyBarsMeas = {top: 20, right: 50, bottom: 20, left: 170, barHeight: 20, width: $('#brgyBars').innerWidth()};
  brgyBars = d3.select('#brgyBars').append('svg')
      .attr("width", brgyBarsMeas.width)

  brgyBarsX = d3.scaleLinear()
      .range([0, brgyBarsMeas.width - brgyBarsMeas.left - brgyBarsMeas.right])

  buildTimeline();
}

var timelineMeas, timelineGraph, timelineX, timelineY, timelineAxisX, timelineAxisY, timelineLine;
function buildTimeline(){
  timelineMeas = {top: 20, right: 40, bottom: 30, left: 50, height: 350, containerWidth: $('#progressGraph').innerWidth()},

  timelineGraph = d3.select("#progressGraph").append("svg")
      .attr("width", timelineMeas.containerWidth)
      .attr("height", timelineMeas.height + timelineMeas.top + timelineMeas.bottom)
    .append("g")
      .attr("transform", "translate(" + timelineMeas.left + "," + timelineMeas.top + ")");

  timelineX = d3.scaleTime()
    .range([0, timelineMeas.containerWidth - timelineMeas.left - timelineMeas.right]);
  timelineY = d3.scaleLinear()
    .range([timelineMeas.height, 0]);

  timelineAxisX = d3.axisBottom();
  timelineAxisY = d3.axisLeft();

  timelineLine = d3.line()
      .curve(d3.curveStepAfter)
      .x(function(d) { return timelineX(d.key); })
      .y(function(d) { return timelineY(d.total); });

  var bisectDate = d3.bisector(function(d) { return d.key; }).left;
  var readableDate = d3.timeFormat("%d %b %Y");

  timelineGraph.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + timelineMeas.height + ")")

  timelineGraph.append("g")
      .attr("class", "y axis")

  timelineGraph.append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Total constructed");

  timelineGraph.append("path")
    .attr("class", "line")
    .attr("stroke","#7f181b")
    .attr("stroke-width","2")
    .attr("fill", "none");

  var focus = timelineGraph.append("g")
    .attr("class", "focus")
    .style("display", "none");

  focus.append("circle")
    .attr("r", 5)
    .attr("fill", "rgba(237,27,46,0.6)")
    .attr("stroke", "#ed1b2e")
    .attr("stroke-width", "1.5px")


  timelineGraph.append("text")
    .attr("class", "detail")
    .attr("x", 15 + timelineMeas.left)
    .attr("dy", ".35em")
    .attr("font-size","14px")

  timelineGraph.append("rect")
    .attr("class", "overlay")
    .attr("width", timelineMeas.containerWidth - timelineMeas.left - timelineMeas.right)
    .attr("height", timelineMeas.height)
    .attr("fill", "none")
    .attr("pointer-events", "all")
    .on("mouseover", function() { focus.style("display", null); })
    .on("mouseout", function() { focus.style("display", "none"); })
    .on("mousemove", mousemove);

  function mousemove() {
    var x0 = timelineX.invert(d3.mouse(this)[0]),
    i = bisectDate(dateData, x0, 1),
    d0 = dateData[i - 1],
    d1 = dateData[i],
    d = x0 - d0.key > d1.key - x0 ? d1 : d0;
    focus.attr("transform", "translate(" + timelineX(d.key) + "," + timelineY(d.total) + ")");
    timelineGraph.select(".detail").text(readableDate(d.key) + " - " + d.value + " completed, " + d.total + " total");
  }


  drawBars();

}

function drawBars(){
  // get sume of grants per brgy
  var brgyBarsData = d3.nest()
    .key(function(d) { return d['hh_id'].slice(0,5); })
    .rollup(function(value) { return value.length; })
    .entries(filteredData);

  brgyBarsX.domain([0, d3.max(brgyBarsData, function(d) { return d.value; })]);

  brgyBars.attr("height", brgyBarsMeas.barHeight * brgyBarsData.length);

  var barEnter = d3.select('#brgyBars').select('svg').selectAll("g")
      .data(brgyBarsData, function(d){ return d['key']; })

  barEnter.exit().remove();

  barEnter.enter().append("g").each(function(d){
    d3.select(this).append('rect')
      .attr("height", brgyBarsMeas.barHeight - 1)
    d3.select(this).append("text")
      .attr("class","brgy-label")
      .attr("x", -5)
      .attr("y", brgyBarsMeas.barHeight / 2)
      .attr("dy", ".35em")
    d3.select(this).append("text")
      .attr("class","brgy-total")
      .attr("y", brgyBarsMeas.barHeight / 2)
      .attr("dy", ".35em")
  });

  var barUpdate = d3.select('#brgyBars').select('svg').selectAll("g");
  barUpdate.sort(function(a, b) { return b.value - a.value; })
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("transform", function(d, i) { return "translate(" + brgyBarsMeas.left + "," + i * brgyBarsMeas.barHeight + ")"; });
  barUpdate.select("rect")
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("width", function(d) { return brgyBarsX(d.value); })
  barUpdate.select(".brgy-label")
    .text(function(d) { return locationLookup[d.key].barangay + ", " + locationLookup[d.key].municipality; });
  barUpdate.select(".brgy-total")
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("x", function(d) { return brgyBarsX(d.value) + 3; })
    .text(function(d) { return d.value; });

  drawTimeline();

}

function drawTimeline(){

  dateData = d3.nest()
    .key(function(d) { return d.hh_completed; }).sortKeys(d3.ascending)
    .rollup(function(value) { return value.length; })
    // filter out data that is null or way to early
    .entries(filteredData.filter(function(d){ if(d['hh_completed'] !== null && new Date(d['hh_completed']) > new Date('2014-01-01')){ return true; } }));

  var total = 0;
  $.each(dateData, function(index, date){
    date.key = new Date(date.key);
    total += date.value;
    date['total'] = total;
  });

  timelineX.domain(d3.extent(dateData, function(d) { return d.key; }));
  timelineY.domain(d3.extent(dateData, function(d) { return d.total; }));
  timelineAxisX.scale(timelineX);
  timelineAxisY.scale(timelineY);
  timelineGraph.select(".x.axis").transition().duration(1500).ease(d3.easeLinear).call(timelineAxisX);
  timelineGraph.select(".y.axis").transition().duration(1500).ease(d3.easeLinear).call(timelineAxisY);
  timelineGraph.select(".line").datum(dateData).attr("d", timelineLine);

  buildList()
}

function buildList(){

  $('#listTable').empty();
  $('#listTable').html('<table data-sortable id="dataTable" class="compact stripe cell-border" cellspacing="0">' +
        '<thead>'+
          '<tr><th>First<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Last<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Barangay<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Municipality<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Details<br><input class="column-search" type="search" placeholder="search..." /></th>'+
        '</thead>'+
        '<tbody></tbody></table>');
  $.each(filteredData, function(i,d){
        var rowHtml = '<tr>' +
        '<td>' + d.hh_respondent_first_name + '</td>' +
        '<td>' + d.hh_respondent_last_name + '</td>' +
        '<td>' + adminText(d.location_id, 'brgy') + '</td>' +
        '<td>' + adminText(d.location_id, 'muni') + '</td>' +
        '<td><span class="info-modal-trigger" data-second="' + d.photo_latrine_two + '" " data-uuid="' + d['_uuid'] + '" data-first="'+d.photo_latrine_one+'"><i class="fa fa-info-circle"></i></span></td>' +
      '</tr>';
    $('#listTable tbody').append(rowHtml);
  });

  var modalReadableTime = d3.timeFormat("%d-%b-%Y");

  $('.info-modal-trigger').on('click', function (event) {
      var triggerId = $(this).data('uuid').toString();

      var src = "http://formhub.redcross.org/attachment/original?media_file=arc_ttl/attachments/";
      var modal = $("#details-modal");

      modal.find('.modal-body img.img-before').attr("src", src+$(this).data('first'));
      modal.find('.modal-body img.img-after').attr("src", src+$(this).data('second'));

      for(i=0;i<data.length;i++){
        if(triggerId === data[i]['_uuid']){
          var hhId = (data[i].hh_id !== null) ? data[i].hh_id.toString() : "<i>household ID not found</i>";
          modal.find('#modal-hh-id').html(hhId);

          var benDetailsHtml = "<b>Beneficiary respondent:</b> " + data[i].hh_respondent_first_name + " ";

          if(data[i].hh_respondent_middle_name !== null){
            if(data[i].hh_respondent_middle_name.length > 0){ benDetailsHtml += data[i].hh_respondent_middle_name + " " ; }
          }

          benDetailsHtml += data[i].hh_respondent_last_name + "<br>" + "<b>Location:</b> "
          benDetailsHtml += (data[i].location_id === "data missing") ? "data missing" : locationLookup[data[i].location_id].barangay + ", " + locationLookup[data[i].location_id].municipality;
          benDetailsHtml += "<br>" + "<b>Date completed:</b> " + modalReadableTime(new Date(data[i].hh_completed)) + "<br>" +
            "<b>Team leader:</b> " + data[i].team_leader_first_name + " ";

          if(data[i].team_leader_middle_name !== null){
            if(data[i].team_leader_middle_name.length > 0){ benDetailsHtml += data[i].team_leader_middle_name + " " ; }
          }

          benDetailsHtml += data[i].team_leader_last_name;

          modal.find('.modal-body p').html(benDetailsHtml);
          break;
        }
      }
      modal.foundation('open');
    });


  var table = $('#dataTable').DataTable({
      // scrollX: true,
      "sDom":'lrtip',
      "lengthChange": false,
      "pageLength": 10,
      // "lengthMenu": [ 10, 50, 100 ],
      "language": {
        "lengthMenu": "Display _MENU_ records",
        "info": "Showing _START_ to _END_ of _TOTAL_ records",
      }
    });

    // stop a click in the search input box from triggering a sort on the column
    $('.column-search').on('click', function(e){
      e.stopPropagation();
    });

    // initialize column search functionality
    table.columns().every( function() {
      var that = this;
      $('input', this.header() ).on('keyup change', function(){
        if( that.search() !== this.value ){
          that
          .search( this.value )
          .draw();
        }
      });
    });

}

getLocationData();

</script>
