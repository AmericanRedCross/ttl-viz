<div id="phast-page">

<div class="row">
	<div class="columns">
		<h2>PHAST</h2>
	</div>
</div>

<br>

<div class="row">
  <div class="columns">
    <div id="loader" class="text-center">
    	<img src="{{opts.nginxlocation}}media/ajax_loader_gray_512.gif" alt="loading..." />
    </div>
    <p>
      <u>ACTIVE FILTERS</u>: <span id="filter-active-text"></span><br>
      <a onclick="clearAllCheckboxes();"><i class="fa fa-trash-o"></i> clear ALL filters</a>
    </p>
    <ul class="tabs" data-active-collapse="true" data-tabs id="filter-nav">
    	<!-- panel titles go here -->
    </ul>
    <div class="tabs-content" data-tabs-content="filter-nav" id="filter-nav-tabs">
      <!-- collapse divs go here -->
    </div>
  </div>
</div>
<br>

<div class="row">
  <div class="columns">
	   <div id="brgyBars"></div>
  </div>
</div>

<br>

<div class="row">
	<div class="small-12 medium-offset-1 medium-10 columns">
    <h4>Percentage of participants completing each module</h4>
			<div id="perModuleGraph"></div>
  </div>
</div>

<br>

<div class="row">
	<div class="small-12 medium-offset-1 medium-10 columns">
    <h4>Number of modules completed</h4>
    <div id="modulesAttendedGraph"></div>
  </div>
</div>

<br>

<div class="row">
  <div class="columns">
      <div id="listTable"></div>
  </div>
</div>

</div><!-- / container -->

<br>
{{> page/footer}}


<link rel="stylesheet" href="//cdn.datatables.net/1.10.13/css/jquery.dataTables.min.css">
<style>
  /* because we want dark grey not blue sort arrows */
  table.dataTable thead .sorting_asc { background-image: url("{{opts.nginxlocation}}media/sort_asc.png"); }
  table.dataTable thead .sorting_desc { background-image: url("{{opts.nginxlocation}}media/sort_desc.png"); }
</style>
<script src="//cdn.datatables.net/1.10.13/js/jquery.dataTables.min.js"></script>
<script>
var data, filteredData;
var locationLookup = {};

var commaSeperator = d3.format(",");

function adminText(locationId, type){
  if(locationLookup[locationId] === undefined){ return "no data"}
  else if (type === "muni") {
    return locationLookup[locationId].municipality;
  } else if (type === "brgy") {
    return locationLookup[locationId].barangay;
  } else { return "error" }
}


d3.select(window).on("resize", throttle);
var throttleTimer;
function throttle() {
  window.clearTimeout(throttleTimer);
    throttleTimer = window.setTimeout(function() {
      resize();
    }, 200);
}
function resize() {
  d3.select('#brgyBars').select("svg").remove();
  d3.select('#perModuleGraph').select("svg").remove();
  d3.select('#modulesAttendedGraph').select("svg").remove();

  buildBars();
}

function clearAllCheckboxes(){
  var allCheckboxes = $.find("input:checkbox");
  $.each(allCheckboxes, function(i, box){ $(box).prop('checked',false); });
  filter();
}

function getLocationData(){
  $.get('{{opts.nginxlocation}}api/pages/targetlocations', function(response){
    $.each(response, function(index, location){
      locationLookup[location.location_id] = location;
      locationLookup[location['location_id'].slice(0,2)] = location;
    });
// locationLookup = {
//   "14124": {
//     "id":"24", "location_id":"14124", "barangay_id":"124", "municipality_id":"14", "province":"Leyte",  "municipality":"Tacloban",  "barangay":"San Paglaum 103A"  },
//   "14123": {...},
//   ...
// };
    fetchData();
  });
}

function fetchData(){
  $.get('{{opts.nginxlocation}}api/pages/phast', function(response){
    data = response;
    var counter = 0;
    data.forEach(function(d){
      d['location_id'] = [d['household_id'].slice(0,5)];
      d['location'] = [d['household_id'].slice(0,2), d['household_id'].slice(0,5)];
      counter++;
      if(counter === data.length){ buildFilters(); }
    });
  });
}

function buildFilters(){
  // # get the unique values from the data for all our filter fields
   var civilArray = [],
      genderArray = [],
      trainingArray = [],
      locationArray = [];
  $.each(data, function(i,item){
    item['location_id'].forEach(function(d){
      if($.inArray(d, locationArray) === -1){ locationArray.push(d) }
    });
  });
  // # alphabetize them arrays
  locationArray.sort(function(a, b) { return a - b; });
  // # build the html and add it to the page
  var panelTitles = [];
    // var panelBodies = [];
    function panelHtml(title, dataId, array, geo){
      var thisTitleHtml = '<li class="tabs-title">' +
        '<a href="#' + dataId + '">' + title + '</a></li>';
      panelTitles.push(thisTitleHtml);
      var thisBodyHtml = '<div class="tabs-panel" id="' + dataId + '">';
      if(geo === true) {
        var municipArray = [];
        $.each(array, function(i, a){
          var thisMunicip = a.slice(0,2);
          if($.inArray(thisMunicip, municipArray) === -1 && locationLookup[thisMunicip] !== undefined){
            municipArray.push(thisMunicip);
            thisBodyHtml += (municipArray.length > 0) ? '<br>' : '';
            thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
                thisMunicip + '" onchange="filter();"><strong>' + locationLookup[thisMunicip].municipality + '<strong></label></div><br>';
          }
          if(locationLookup[a] === undefined){ thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
              a + '" onchange="filter();">' + 'data error' + '</label></div>'; }
          else { thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
              a + '" onchange="filter();">' + locationLookup[a].barangay + '</label></div>'; }
        })
      } else {
        $.each(array, function(i, a){
          thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="'+
              dataId + '" value="' + a + '" onchange="filter();">' + a + '</label></div>';
        })
      }
      thisBodyHtml += '</div>';
      $('#filter-nav-tabs').append(thisBodyHtml);

    }
    panelHtml('Location', null, locationArray, true);
    $('#filter-nav').append(panelTitles);
    Foundation.reInit($('#filter-nav'))
    filteredData = data;
    $('#loader').hide();
    buildBars();

}

function filter(){
  // # look at all the checkboxes and record whats checked
  activeFilters = []
  checkboxes = $("#filter-nav-tabs input[type=checkbox]");
    for (i=0; i<checkboxes.length; i++) {
      if(checkboxes[i].checked === true) {
        activeFilters.push({
          filterKey: checkboxes[i].name,
          filterValue: checkboxes[i].value
        })
      }
    }
  // # reformat the data on checks to make it easier to work with
  // ? combine this into what's above
  filterData = d3.nest().key(function(d){ return d.filterKey })
    .rollup(function(value){
      var valuesArray = [];
      value.forEach(function(d){
        valuesArray.push(d.filterValue);
      });
      return valuesArray;
    }).entries(activeFilters)
  // # update the html on the page to let the user know what filters are active
  var keyGroups = [];
  $.each(filterData,function(i,filterKey){
    var keyGroupHtml = '(<b>' + filterKey.key + '</b> <small>=</small> ';
    var valueGroups = [];
    console.log(filterKey)
    $.each(filterKey.value, function(j,filterValue){
      valueGroups.push('<b>' + filterValue + '</b>');
    })
    keyGroupHtml += valueGroups.join(" <small>OR</small> ") + ")"
    keyGroups.push(keyGroupHtml);
  });
  $('#filter-active-text').html(keyGroups.join(" <small>AND</small> "));
  // # filter the data
  var filterKeyCount = filterData.length;
  filteredData = data.filter(function(d){
    var passCount = 0;
    var project = d;
    $.each(filterData,function(iKey, filterKey){
      var pass = false;
      var thisKey = filterKey.key;
      $.each(filterKey.value, function(iValue, filterValue){
        // # if any of the filter values for a given key are present, that filter key is passed
        if($.inArray(filterValue, project[thisKey]) !== -1){ pass = true; }
      });
      if(pass === true){ passCount ++; }
    });
    // # if all filter keys are passed, the project passes the filtering
    return passCount === filterKeyCount;
  })
  console.log(filteredData.length)

  drawBars();

}


var brgyBarsMeas, brgyBars, brgyBarsX;
function buildBars(){
  brgyBarsMeas = {top: 20, right: 50, bottom: 20, left: 170, barHeight: 20, width: $('#brgyBars').innerWidth()};
  brgyBars = d3.select('#brgyBars').append('svg')
      .attr("width", brgyBarsMeas.width)

  brgyBarsX = d3.scaleLinear()
      .range([0, brgyBarsMeas.width - brgyBarsMeas.left - brgyBarsMeas.right])

  buildGraphs();
}

var perModuleMeas, perModuleSvg, perModuleXscale, perModuleYscale, perModuleYaxis, perModuleYele;
var modulesAttendedMeas, modulesAttendedSvg, modulesAttendedXscale, modulesAttendedYscale, modulesAttendedYaxis, modulesAttendedYele;
function buildGraphs(){

  // ### PARTICIPANTS PER MODULE
  perModuleMeas = {top: 20, right: 60, bottom: 45, left: 60,
    height: 250 - 40, width: $('#perModuleGraph').innerWidth() - 60 - 60 };
  perModuleMeas.barWidth = perModuleMeas.width / (20 * 2),

  perModuleSvg = d3.select('#perModuleGraph').append('svg')
    .attr("width", perModuleMeas.width + perModuleMeas.left + perModuleMeas.right)
    .attr("height", perModuleMeas.height + perModuleMeas.top + perModuleMeas.bottom)
    .append('g').attr("transform", "translate(" + perModuleMeas.left + "," + perModuleMeas.top + ")");

  perModuleYscale = d3.scaleLinear()
    .range([perModuleMeas.height, 0])
  perModuleXscale = d3.scaleBand()
    .range([0, perModuleMeas.width])
    .domain(d3.range(1,21))

  perModuleSvg.append("g")
    .attr("class", "x axis graph-axis")
    .attr("transform", "translate(0," + perModuleMeas.height + ")")
    .call(d3.axisBottom(perModuleXscale));

  perModuleSvg.append("text")
    .attr("transform", "translate(" + (perModuleMeas.width / 2) + " ," + (perModuleMeas.height + perModuleMeas.bottom - 5) + ")")
    .style("text-anchor", "middle")
    .text("Module #");

  perModuleSvg.append("text")
    .attr("transform", "rotate(-90)")
    .attr("y", 0 - perModuleMeas.left)
    .attr("x", 0 - (perModuleMeas.height / 2))
    .attr("dy", "1em")
    .style("text-anchor", "middle")
    .text("% participants completing");

  perModuleYaxis = d3.axisLeft(perModuleYscale).ticks(10, "%");

  perModuleYele = perModuleSvg.append("g")
    .attr("class", "y axis graph-axis")


  // ### NUMBER OF MODULES COMPLETED

  modulesAttendedMeas = {top: 20, right: 60, bottom: 45, left: 60,
    height: 250 - 40, width: $('#modulesAttendedGraph').innerWidth() - 60 - 60 };
  modulesAttendedMeas.barWidth = modulesAttendedMeas.width / (20 * 2),

  modulesAttendedSvg = d3.select('#modulesAttendedGraph').append('svg')
    .attr("width", modulesAttendedMeas.width + modulesAttendedMeas.left + modulesAttendedMeas.right)
    .attr("height", modulesAttendedMeas.height + modulesAttendedMeas.top + modulesAttendedMeas.bottom)
    .append('g').attr("transform", "translate(" + modulesAttendedMeas.left + "," + modulesAttendedMeas.top + ")");

  modulesAttendedYscale = d3.scaleLinear()
    .range([modulesAttendedMeas.height, 0])
  modulesAttendedXscale = d3.scaleBand()
    .range([0, modulesAttendedMeas.width])
    .domain(d3.range(0,21))

  modulesAttendedSvg.append("g")
    .attr("class", "x axis graph-axis")
    .attr("transform", "translate(0," + modulesAttendedMeas.height + ")")
    .call(d3.axisBottom(modulesAttendedXscale));

  modulesAttendedSvg.append("text")
    .attr("transform", "translate(" + (modulesAttendedMeas.width / 2) + " ," + (modulesAttendedMeas.height + modulesAttendedMeas.bottom - 5) + ")")
    .style("text-anchor", "middle")
    .text("# of modules completed");

  modulesAttendedSvg.append("text")
    .attr("transform", "rotate(-90)")
    .attr("y", 0 - modulesAttendedMeas.left)
    .attr("x", 0 - (modulesAttendedMeas.height / 2))
    .attr("dy", "1em")
    .style("text-anchor", "middle")
    .text("# participants");

  modulesAttendedYaxis = d3.axisLeft(modulesAttendedYscale)

  modulesAttendedYele = modulesAttendedSvg.append("g")
    .attr("class", "y axis graph-axis")


  drawModulesAttended();

}

function drawModulesAttended(){

  // ### PARTICIPANTS PER MODULE
  var perModuleData = []
  d3.range(1,21).forEach(function(d){
    perModuleData.push(0);
  })
  filteredData.forEach(function(d){
    d3.range(1,21).forEach(function(n){
      var columnName = "training_activity_" + n;
      if(d[columnName] !== null) {
        if(d[columnName].indexOf("Y") !== -1) { ; perModuleData[n-1]++; }
      }
    })
  })
  $.each(perModuleData, function(i, a){
    // get percentage of participants completing the module
    perModuleData[i] = a / filteredData.length;
  })

  perModuleYscale.domain([0, 1])
  perModuleYele.call(perModuleYaxis)
  var perModuleG = perModuleSvg.selectAll(".bar")
        .data(perModuleData, function(d, i){ return i; })
  perModuleG.enter().append("rect").transition().duration(1000).ease(d3.easeLinear)
        .attr("class", "graph-bar")
        .attr("x", function(d, i) { return perModuleXscale(i+1); })
        .attr("width", perModuleXscale.bandwidth() - 4)
        .attr("y", function(d) { return perModuleYscale(d); })
        .attr("height", function(d) { return perModuleMeas.height - perModuleYscale(d); });
  perModuleG.exit().remove();

  // ### NUMBER OF MODULES COMPLETED
  var modulesAttendedData = d3.nest()
      .key(function(d) { return d.training_total_attendance; } )
      .rollup(function(value) { return value.length; })
      .entries(filteredData);
  modulesAttendedData.forEach(function(d){
    d.key = parseInt(d.key);
  });
  modulesAttendedData.sort(function(a,b){
    return a.key - b.key
  });
  modulesAttendedYscale.domain([0, d3.max(modulesAttendedData, function(d){ return d.value })])
  modulesAttendedYele.call(modulesAttendedYaxis)
  var modulesAttendedG = modulesAttendedSvg.selectAll(".bar")
        .data(modulesAttendedData, function(d){ return d['key']; })
  modulesAttendedG.enter().append("rect").transition().duration(1000).ease(d3.easeLinear)
        .attr("class", "graph-bar-2")
        .attr("x", function(d) { return modulesAttendedXscale(d.key); })
        .attr("width", modulesAttendedXscale.bandwidth() - 4)
        .attr("y", function(d) { return modulesAttendedYscale(d.value); })
        .attr("height", function(d) { return modulesAttendedMeas.height - modulesAttendedYscale(d.value) + 1; });
  modulesAttendedG.exit().remove();

  drawBars();

}

function drawBars(){
  // get sum of grants per brgy
  var brgyBarsData = d3.nest()
    .key(function(d) { return d['household_id'].slice(0,5); })
    .rollup(function(value) { return value.length; })
    .entries(filteredData);

  brgyBarsX.domain([0, d3.max(brgyBarsData, function(d) { return d.value; })]);

  brgyBars.attr("height", brgyBarsMeas.barHeight * brgyBarsData.length);

  var barEnter = d3.select('#brgyBars').select('svg').selectAll("g")
      .data(brgyBarsData, function(d){ return d['key']; })

  barEnter.exit().remove();

  barEnter.enter().append("g").each(function(d){
    d3.select(this).append('rect')
      .attr("height", brgyBarsMeas.barHeight - 1)
    d3.select(this).append("text")
      .attr("class","brgy-label")
      .attr("x", -5)
      .attr("y", brgyBarsMeas.barHeight / 2)
      .attr("dy", ".35em")
    d3.select(this).append("text")
      .attr("class","brgy-total")
      .attr("y", brgyBarsMeas.barHeight / 2)
      .attr("dy", ".35em")
  });

  var barUpdate = d3.select('#brgyBars').select('svg').selectAll("g");
  barUpdate.sort(function(a, b) { return b.value - a.value; })
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("transform", function(d, i) { return "translate(" + brgyBarsMeas.left + "," + i * brgyBarsMeas.barHeight + ")"; });
  barUpdate.select("rect")
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("width", function(d) { return brgyBarsX(d.value); })
  barUpdate.select(".brgy-label")
    .text(function(d) {
      if(locationLookup[d.key] === undefined){ return d.key; }
      else { return locationLookup[d.key].barangay + ", " + locationLookup[d.key].municipality; }
    });
  barUpdate.select(".brgy-total")
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("x", function(d) { return brgyBarsX(d.value) + 3; })
    .text(function(d) { return d.value; });

  buildList();

}

var activitiesHeaders = "";
$.each(d3.range(1,21), function(i, a){
  activitiesHeaders += '<th>' + a + '<br><input class="column-search" type="search" placeholder="search..." /></th>';
})


function buildList(){

  $('#listTable').empty();
  $('#listTable').html('<table data-sortable id="dataTable" class="compact stripe cell-border" cellspacing="0">' +
        '<thead>'+
          '<tr><th>HH ID<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>First<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Last<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Barangay<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Municipality<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          activitiesHeaders +
          '<th>Modules attended<br><input class="column-search" type="search" placeholder="search..." /></th>'+
        '</thead>'+
        '<tbody></tbody></table>');
  $.each(filteredData, function(i,d){
    var rowHtml = '<tr>' +
      '<td>' + d['household_id'] + '</td>' +
      '<td>' + d['participant_fname'] + '</td>' +
      '<td>' + d['participant_lname'] + '</td>' +
      '<td>' + adminText(d.location_id, 'brgy') + '</td>' +
      '<td>' + adminText(d.location_id, 'muni') + '</td>';
  $.each(d3.range(1,21), function(i, a){
    var thisSearch = "training_activity_" + a;
    rowHtml += '<td>' + d[thisSearch] + '</td>';
  })
  rowHtml += '<td>' + d['training_total_attendance'] + '</td>' +
    '</tr>';
    $('#listTable tbody').append(rowHtml);
  });


  var table = $('#dataTable').DataTable({
      // scrollX: true,
      "sDom":'lrtip',
      "lengthChange": false,
      "pageLength": 10,
      // "lengthMenu": [ 10, 50, 100 ],
      "language": {
        "lengthMenu": "Display _MENU_ records",
        "info": "Showing _START_ to _END_ of _TOTAL_ records",
      }
    });

    // stop a click in the search input box from triggering a sort on the column
    $('.column-search').on('click', function(e){
      e.stopPropagation();
    });

    // initialize column search functionality
    table.columns().every( function() {
      var that = this;
      $('input', this.header() ).on('keyup change', function(){
        if( that.search() !== this.value ){
          that
          .search( this.value )
          .draw();
        }
      });
    });

}

getLocationData();

</script>