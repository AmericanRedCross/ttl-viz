<style>

#mly {
  height: 400px;
  width: 100%;
}
#map {
  height: 400px;
  width: 100%;
}
.layer-btn-img {
  width: 30px;
}
.layer-button {
  cursor: pointer !important;
}
#control-row {
  visibility: hidden;
}
#map-container {
  position: relative;
}
#loader {
  position: absolute;
  top:12px;
  right:6px;
  z-index: 99;
  display: none;
}


</style>
<div id="data-collection-viewer">


<div class="row">
  <div class="medium-offset-1 medium-10 columns">
  	<h2>Imagery Viewer</h2>
  </div>
</div>

<br>

<!-- <div class="row column">
  <div class="callout" data-closable>
    <h5>This a friendly message.</h5>
    <p>And when you're done with me, I can be closed.</p>
    <button class="close-button" aria-label="Dismiss alert" type="button" data-close>
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
</div> -->

<div id="control-row" class="row">
  <div class="medium-3 small-6 columns">
    <select id='brgy-select'></select>
  </div>
  <div class="medium-9 small-6 columns end">
    <button type="button" onClick="toggleOam(this);" class="hollow button secondary layer-oam layer-button"><img class="layer-btn-img" alt="Drone icon - Created by Peter Van Criel from Noun Project" src="{{opts.nginxlocation}}img/drone.png"> Aerial imagery</button>
    <button type="button" onClick="toggleMapillary(this);" class="hollow button secondary layer-button disabled"><img class="layer-btn-img"  src="{{opts.nginxlocation}}img/mapillary.png"> Mapillary</button>
    <button type="button" onClick="toggleOsm(this);" class="hollow button secondary layer-button disabled"><img class="layer-btn-img" src="{{opts.nginxlocation}}img/house.png"> OSM buildings</button>
  </div>
</div>

<br>

<div class="row collapse">
  <div id="map-container" class="small-12 columns">
    <div id="loader"><i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i></div>
    <div id='map'></div>
  </div>
  <div id="mly-container" style="display:none;" class="medium-6 columns">
    <div id='mly'></div>
    <div style="padding:12px;">
      <div id="mly-intro-text"><p>Zoom in and click a green circle marker on the map to load a street-level image.</p></option></div>
      <button type="button" onClick="zoomToMly();" class="hollow button secondary tiny">
        Zoom map to viewer image</button>
    </div>
  </div>

</div>

<br>

</div>

<!-- mapboxGL/mapillary css -->
<link href='https://unpkg.com/mapillary-js@2.6.0/dist/mapillary.min.css' rel='stylesheet' />
<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.38.0/mapbox-gl.css' rel='stylesheet' />
<!-- mapboxGL/mapillary js -->
<script src='https://unpkg.com/mapillary-js@2.6.0/dist/mapillary.min.js'></script>
<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.38.0/mapbox-gl.js'></script>
<script>


mapboxgl.accessToken = "pk.eyJ1IjoiYW1lcmljYW5yZWRjcm9zcyIsImEiOiJzdHVRWjA4In0.bnfdwZhKX8tQeMkwY-kknQ"
var selectedLayer = ""; // variable to store OAM layer being currently viewed
var selectedMly = null; // variable to store mapillary image being currently viewed
// initialize map container
var map = new mapboxgl.Map({
  container: 'map',
  style: 'mapbox://styles/mapbox/streets-v9',
  center: [124.9935, 11.1318],
  zoom: 10
});

function toggleOam(btn){
 if($(btn).hasClass("disabled")){
   $(btn).removeClass("disabled");
   map.setLayoutProperty(selectedLayer, 'visibility', 'visible');
 } else {
   $(btn).addClass("disabled");
   map.setLayoutProperty(selectedLayer, 'visibility', 'none');
 }
}

function toggleMapillary(btn){
 if($(btn).hasClass("disabled")){
   $(btn).removeClass("disabled");
   $("#mly-container").show();
   $("#map-container").addClass("medium-6");
   $("#map-container").removeClass("small-12");
   mly.resize();
   map.setLayoutProperty("mapillary", 'visibility', 'visible');
   map.setLayoutProperty("mapillary-images", 'visibility', 'visible');
   map.resize();
   if(selectedMly !== null) {
     map.setFilter("mapillary-images-angle", ["==", "key", selectedMly.key]);
   }
 } else {
   $(btn).addClass("disabled");
   $("#mly-container").hide();
   $("#map-container").addClass("small-12");
   $("#map-container").removeClass("medium-6");
   map.setLayoutProperty("mapillary", 'visibility', 'none');
   map.setLayoutProperty("mapillary-images", 'visibility', 'none');
   map.setFilter("mapillary-images-angle", ["==", "key", ""]);
   map.resize();
 }
}

function toggleOsm(btn){
  if($(btn).hasClass("disabled")){
    $(btn).removeClass("disabled");
    map.setLayoutProperty("buildings", 'visibility', 'visible');
  } else {
    $(btn).addClass("disabled");
    map.setLayoutProperty("buildings", 'visibility', 'none');
  }
}

function zoomToMly(){
  map.flyTo({
      center: [selectedMly.latLon.lon, selectedMly.latLon.lat],
      zoom: 18,
      bearing: 0,
      speed: 0.8, // make the flying slow
      curve: 1, // change the speed at which it zooms out
      easing: function (t){ return t; } // can be any easing function: it takes a number between 0 and 1 and returns another number between 0 and 1.
  });
}

// initialize mapillary container
var mly = new Mapillary.Viewer(
  'mly', // container ID
  'S1FUamFnYXBpN2NDSWplbDRtRUJoUToyZjIyYjEyMjJkNTU4ZWZj', //client ID
  null, // starting image
  { component: {
    // cache: false,
    // cover: false,
    // direction: false
    }
  });

map.on('load', function(e){
  d3.csv("{{opts.nginxlocation}}data/data-viewer-points.csv", function(error, data){
    initLayers(data);
  })
})

function initLayers(data) {
  // add a map layer for each data row (barangay) that has a value in the OAM url column
  for(var i=0; i<data.length; i++){
    if(data[i].oam.length > 1){
      var sourceId = "src-" + data[i].id;
      var layerId = "brgy-" + data[i].id;
      var oamSource = {
        "type": "raster",
        "tiles": [ data[i].oam ],
        "tileSize": 256
      };
      map.addSource(sourceId, oamSource);
      var oamLayer = {
        "id": layerId,
        "type": "raster",
        "source": sourceId,
        "minzoom":0,
        "maxzoom":22,
        "layout":{'visibility':'none'}
      };
      map.addLayer(oamLayer);
    }
  }

  // build dropdown for OAM imagery selection
  var options = d3.select("#brgy-select").selectAll('option').data(data.filter(function(d){ return d.oam.length > 1; })).enter()
    .append('option')
      .attr("id", function(d){ return "brgy"+ d.id; })
      .attr("value", function(d){ return d.id; })
      .text(function(d){ return d.brgy + ", " + d.muni; });
  $("#brgy-select").prepend('<option selected disabled hidden style="display: none" value="">Select a barangay...</option>');
  d3.select("#brgy-select")
    .on('change', function(){
      options.each(function(){ d3.select(this).classed('active', false); })
      $(this).find("option:selected").addClass('active')
      var selection = d3.select("#brgy-select .active").data()[0];
      var target = [ parseFloat(selection.x), parseFloat(selection.y) ]
      map.flyTo({
          center: target,
          zoom: 16,
          bearing: 0,
          speed: 0.8, // make the flying slow
          curve: 1, // change the speed at which it zooms out
          easing: function (t){ return t; } // can be any easing function: it takes a number between 0 and 1 and returns another number between 0 and 1.
      });
      if($(".layer-oam.layer-button").hasClass("disabled")) {
        $(".layer-oam.layer-button").removeClass("disabled");
      }
      map.setLayoutProperty(selectedLayer, 'visibility', 'none');
      selectedLayer = "brgy-" + selection.id;
      map.setLayoutProperty(selectedLayer, 'visibility', 'visible');
    });

  map.addLayer({
    "id": "buildings",
    "type": "line",
    "source": {
      type: 'vector',
      url: 'mapbox://mapbox.mapbox-streets-v7'
    },
    "source-layer": "building",
    "layout": {
      "line-join": "round",
      "line-cap": "round"
    },
    "paint": {
      'line-opacity': 0.8,
      'line-color': '#d3d3d3',
      'line-width': 1.5
    },
    "layout":{'visibility':'none'}
  });


  // add mapillary vector tile source, icon, and map layers
  var mapillarySource = {
    "type": "vector",
    "tiles": ["https://d25uarhxywzl1j.cloudfront.net/v0.1/{z}/{x}/{y}.mvt"],
    "minzoom": 0,
    "maxzoom": 14
  };
  map.addSource("mapillary", mapillarySource);
  map.loadImage('{{opts.nginxlocation}}img/view.png', (error, image) => {
    if(error) console.log(error);
    map.addImage('viewAngle', image);
  });
  map.addLayer({
      'id': 'mapillary',
      'type': 'line',
      'source': 'mapillary',
      'source-layer': 'mapillary-sequences',
      'layout': {
          'line-cap': 'round',
          'line-join': 'round'
      },
      'paint': {
          'line-opacity': 0.6,
          'line-color': 'rgb(53, 175, 109)',
          'line-width': 2
      },
      "layout":{'visibility':'none'}
  });
  map.addLayer({
    "id": "mapillary-images",
    "type": "circle",
    "source": "mapillary",
    "source-layer": "mapillary-images",
    "paint": {
      "circle-radius": 8,
      "circle-color": "#2e870a",
      "circle-opacity": 0.3,
      "circle-stroke-width": 1,
      "circle-stroke-color": "#2e870a"
    },
    "layout":{'visibility':'none'}
  });
  map.addLayer({
    "id": "mapillary-images-angle",
    "type": "symbol",
    "source": "mapillary",
    "source-layer": "mapillary-images",
    "layout": {
      "icon-image": "viewAngle",
      "icon-rotation-alignment": "map",
    },
    "filter": ["==", "key", ""]
  });

  // viewer size is dynamic so mapillary viewer resize should be called every time the window size changes
  window.addEventListener("resize", function() { mly.resize(); });

  // Change the cursor to a pointer when the mouse is over the mapillary images layer.
  map.on('mouseenter', 'mapillary-images', function () {
    map.getCanvas().style.cursor = 'pointer';
  });
  // Change it back to a pointer when it leaves.
  map.on('mouseleave', 'mapillary-images', function () {
    map.getCanvas().style.cursor = '';
  });

  map.on('click', 'mapillary-images', function(evt) {
    $("#loader").fadeIn();
    mly.moveToKey(evt.features[0].properties.key).then(
      function(node){
        console.log("mly.moveToKey : ", node.key);
      },
      function(error){
        console.error("mly.moveToKey error: ", error);
      }
    );
  });

  mly.on(Mapillary.Viewer.bearingchanged, function(bearing) {
    map.setLayoutProperty('mapillary-images-angle', 'icon-rotate', bearing);
  });

  mly.on(Mapillary.Viewer.moveend, function() {
    mly.getBearing().then(function(bearing) {
      map.setLayoutProperty('mapillary-images-angle', 'icon-rotate', bearing);
    });
  });

  mly.on(Mapillary.Viewer.nodechanged, function(node) {
    if(selectedMly === null) { $("#mly-intro-text").hide(); }
    console.log("Mapillary.Viewer.nodechanged")
    selectedMly = node;
    map.setFilter("mapillary-images-angle", ["==", "key", node.key]);
    map.setLayoutProperty('mapillary-images-angle', 'icon-rotate', node.ca);
    // map.panTo() wasn't working for some reason
    map.flyTo({
        center: [node.latLon.lon, node.latLon.lat],
        zoom: map.getZoom(),
        bearing: 0,
        speed: 0.8, // make the flying slow
        curve: 0, // change the speed at which it zooms out
        easing: function (t){ return t; } // can be any easing function: it takes a number between 0 and 1 and returns another number between 0 and 1.
    });
    $("#loader").fadeOut();

  });

$("#control-row").css("visibility", "initial")

};

</script>
