<div id="agriculture-page">

<div id="details-modal" class="reveal" data-reveal>
  <button class="close-button" data-close aria-label="Close modal" type="button"><span aria-hidden="true">&times;</span></button>
  <h5 class="modal-title"></h5>
  <div class="modal-body">
    <p></p>
  </div>
</div>


<div class="row">
	<div class="columns">
		<h2>Agriculture Extension</h2>
	</div>
</div>

<br>

<div class="row">
  <div class="columns">
    <div id="loader" class="text-center">
    	<img src="{{opts.nginxlocation}}media/ajax_loader_gray_512.gif" alt="loading..." />
    </div>
    <p>
      <u>ACTIVE FILTERS</u>: <span id="filter-active-text"></span><br>
      <a onclick="clearAllCheckboxes();"><i class="fa fa-trash-o"></i> clear ALL filters</a>
    </p>
    <ul class="tabs" data-active-collapse="true" data-tabs id="filter-nav">
    	<!-- panel titles go here -->
    </ul>
    <div class="tabs-content" data-tabs-content="filter-nav" id="filter-nav-tabs">
      <!-- collapse divs go here -->
    </div>
  </div>
</div>
<br>


<div class="row">
  <div class="columns">
	   <div id="brgyBars"></div>
  </div>
</div>

<br>

<!-- <div class="row">
	<div class="small-3 columns">
		<h4>Knowledge change</h4>
	  <div id="knowledgechangePie"></div>
	</div>
	<div class="small-3 columns"><div id="knowledgechangeLegend"> </div></div>
	<div class="small-6 columns">
			<h4>Number of participants by knowledge change score</h4>
			<div id="knowLine"></div>
	</div>
</div>

<br>

<div class="row">
	<div class="small-3 columns">
		<h4>Participants per training</h4>
	  <div id="perTrainingPie"></div>
	</div>
	<div class="small-5 columns end"><div id="perTrainingLegend"> </div></div>
</div> -->

<!-- <div class="dashboard-section">
  <h3>completed by date</h3>
	<div id="progressGraph"></div>
</div> -->

<!--
<hr style="margin:0;"> -->

<br>

<div class="row">
  <div class="columns">
      <div id="listTable"></div>
  </div>
</div>

<br>
{{> page/footer}}
</div>

<link rel="stylesheet" href="//cdn.datatables.net/1.10.13/css/jquery.dataTables.min.css">
<style>
  /* because we want dark grey not blue sort arrows */
  table.dataTable thead .sorting_asc { background-image: url("{{opts.nginxlocation}}media/sort_asc.png"); }
  table.dataTable thead .sorting_desc { background-image: url("{{opts.nginxlocation}}media/sort_desc.png"); }
</style>
<script src="//cdn.datatables.net/1.10.13/js/jquery.dataTables.min.js"></script>
<script src="{{opts.nginxlocation}}js/nouislider.min.js"></script>
<script>
var data, filteredData, dateData;
var locationLookup = {};
// # HELPERS
function adminText(locationId, type){
  if(locationLookup[locationId] === undefined){ return "no data"}
  else if (type === "muni") {
    return locationLookup[locationId].municipality;
  } else if (type === "brgy") {
    return locationLookup[locationId].barangay;
  } else { return "error" }
}


d3.select(window).on("resize", throttle);
var throttleTimer;
function throttle() {
  window.clearTimeout(throttleTimer);
    throttleTimer = window.setTimeout(function() {
      resize();
    }, 200);
}
function resize() {
  d3.select('#brgyBars').select("svg").remove();
  d3.select('#knowledgechangePie').select("svg").remove();
  d3.select('#perTrainingPie').select("svg").remove();
  d3.select('#knowLine').select("svg").remove();
  // buildPies();
  buildBars();
}

function clearAllCheckboxes(){
  var allCheckboxes = $.find("input:checkbox");
  $.each(allCheckboxes, function(i, box){ $(box).prop('checked',false); });
  filter();
}

function getLocationData(){
  $.get('{{opts.nginxlocation}}api/pages/targetlocations', function(response){
    $.each(response, function(index, location){
      locationLookup[location.location_id] = location;
      locationLookup[location['location_id'].slice(0,2)] = location;
    });

// locationLookup = {
//   "14124": {
//     "id":"24",
//     "location_id":"14124",
//     "barangay_id":"124",
//     "municipality_id":"14",
//     "province":"Leyte",
//     "municipality":"Tacloban",
//     "barangay":"San Paglaum 103A"
//   },
//   "14123": {...},
//   ...
// };

    fetchData();
  });
}

function fetchData(){
  $.get('{{opts.nginxlocation}}api/pages/agriculture', function(response){
    data = response;
		var counter = 0;
    data.forEach(function(d){
      // # for the filter to work all the filtered data values need to be arrays even if all possibilities are just 1 value
      // # this is keeping the option of filtering on 'proposed_items' open which is a comma seperated data field
      d['location'] = (d['household_id'] === null) ? ['data missing','data missing'] : [d['household_id'].slice(0,2), d['household_id'].slice(0,5)];
      d['location_id'] = [d['household_id'].slice(0,5)];
      d['type_assistance'] = [d['type_assistance']];
      d['received_assistance'] = [d['received_assistance']];
      d['assistance_received'] = [d['assistance_received']];
      counter++;
      if(counter === data.length){ console.log(data); buildFilters(); }
    });
  });
}

function buildFilters(){
  // # get the unique values from the data for all our filter fields
  var assistancetypeArray = [],
      assistancereceivedArray =[],
      locationArray = [];
  $.each(data, function(i,item){
      item['type_assistance'].forEach(function(d){
      if($.inArray(d, assistancetypeArray) === -1){ assistancetypeArray.push(d) }
    });
    item['assistance_received'].forEach(function(d){
      if($.inArray(d, assistancereceivedArray) === -1){ assistancereceivedArray.push(d) }
    });
    item['location_id'].forEach(function(d){
    if($.inArray(d, locationArray) === -1){ locationArray.push(d) }
    });
  });
  // # alphabetize them arrays
  // trainingnameArray.sort(d3.ascending);
  assistancetypeArray.sort(d3.ascending);
  assistancereceivedArray.sort(d3.ascending);
  locationArray.sort(function(a, b) { return a - b; });
  // # build the html and add it to the page
  console.log(locationArray);
  var panelTitles = [];
  // var panelBodies = [];
  function panelHtml(title, dataId, array, geo){
		var thisTitleHtml = '<li class="tabs-title">' +
			'<a href="#' + dataId + '">' + title + '</a></li>';
		panelTitles.push(thisTitleHtml);
		var thisBodyHtml = '<div class="tabs-panel" id="' + dataId + '">';
		if(geo === true) {
			var municipArray = [];
			$.each(array, function(i, a){
				var thisMunicip = a.toString().slice(0,2);
				if($.inArray(thisMunicip, municipArray) === -1 && locationLookup[thisMunicip] !== undefined){
					municipArray.push(thisMunicip);
					thisBodyHtml += (municipArray.length > 0) ? '<br>' : '';
					thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
							thisMunicip + '" onchange="filter();"><strong>' + locationLookup[thisMunicip].municipality + '<strong></label></div><br>';
				}
        if(locationLookup[a] === undefined){ thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
            a + '" onchange="filter();">' + 'data error' + '</label></div>'; }
        else { thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
            a + '" onchange="filter();">' + locationLookup[a].barangay + '</label></div>'; }
      })
    } else {
			$.each(array, function(i, a){
				thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="'+
						dataId + '" value="' + a + '" onchange="filter();">' + a + '</label></div>';
			})
		}
		thisBodyHtml += '</div>';
		$('#filter-nav-tabs').append(thisBodyHtml);

	}
  // panelHtml('Training name', 'training_name', trainingnameArray);
  panelHtml('Assistance Type', 'type_assistance', assistancetypeArray);
  panelHtml('Assistance Received', 'assistance_received', assistancereceivedArray);
  panelHtml('Location', null, locationArray, true);
	  $('#filter-nav').append(panelTitles);
	Foundation.reInit($('#filter-nav'))
  filteredData = data;
  $('#loader').hide();
  buildBars();
  // buildPies();

}

function filter(){
	activeFilters = []
	checkboxes = $("#filter-nav-tabs input[type=checkbox]");
		for (i=0; i<checkboxes.length; i++) {
			if(checkboxes[i].checked === true) {
				activeFilters.push({
					filterKey: checkboxes[i].name,
					filterValue: checkboxes[i].value
				})
			}
		}

    console.log(activeFilters);
	// # reformat the data on checks to make it easier to work with
	// ? combine this into what's above
	filterData = d3.nest().key(function(d){ return d.filterKey })
		.rollup(function(value){
			var valuesArray = [];
			value.forEach(function(d){
				valuesArray.push(d.filterValue);
			});
			return valuesArray;
		}).entries(activeFilters)
	// # update the html on the page to let the user know what filters are active
	var keyGroups = [];
	$.each(filterData,function(i,filterKey){
		var keyGroupHtml = '(<b>' + filterKey.key + '</b> <small>=</small> ';
		var valueGroups = [];
		$.each(filterKey.value, function(j,filterValue){
			valueGroups.push('<b>' + filterValue + '</b>');
		})
		keyGroupHtml += valueGroups.join(" <small>OR</small> ") + ")"
		keyGroups.push(keyGroupHtml);
	});
	$('#filter-active-text').html(keyGroups.join(" <small>AND</small> "));
	// # filter the data
	var filterKeyCount = filterData.length;
	filteredData = data.filter(function(d){
		var passCount = 0;
		var project = d;
		$.each(filterData,function(iKey, filterKey){
			var pass = false;
			var thisKey = filterKey.key;
			$.each(filterKey.value, function(iValue, filterValue){
				// # if any of the filter values for a given key are present, that filter key is passed
				if($.inArray(filterValue, project[thisKey]) !== -1){ pass = true; }
			});
			if(pass === true){ passCount ++; }
		});
		// # if all filter keys are passed, the project passes the filtering
		return passCount === filterKeyCount;
	})
	console.log(filteredData.length)

  drawBars();
	// drawPies()

}

// var pieRadius, knowledgechangePie, knowledgechangePiePath, perTrainingPie, perTrainingPiePath;
// function buildPies(){
//
//   var widthOnPage = $('#knowledgechangePie').innerWidth();
//   var width = (widthOnPage < 300) ? widthOnPage : 300;
//   var height = width;
//   pieRadius = Math.min(width, height) / 2;
//
// 	// build the pie charts
//   knowledgechangePie = d3.select('#knowledgechangePie').append("svg")
//       .attr("width", width)
//       .attr("height", height)
//     .append("g")
//       .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
//   knowledgechangePiePath = knowledgechangePie.selectAll("path");
//
//   perTrainingPie = d3.select('#perTrainingPie').append("svg")
//       .attr("width", width)
//       .attr("height", height)
//     .append("g")
//       .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
//   perTrainingPiePath = perTrainingPie.selectAll("path");
//
//   buildBars();
// };
//
//
var brgyBarsMeas, brgyBars, brgyBarsX;
function buildBars(){
	// build the bar charts
  brgyBarsMeas = {top: 20, right: 50, bottom: 20, left: 170, barHeight: 20, width: $('#brgyBars').innerWidth()};
  brgyBars = d3.select('#brgyBars').append('svg')
      .attr("width", brgyBarsMeas.width)

  brgyBarsX = d3.scaleLinear()
      .range([0, brgyBarsMeas.width - brgyBarsMeas.left - brgyBarsMeas.right])

  drawBars();
  // buildKnowledgeLine()

}
//
// var knowLineMeas, knowLineSvg, knowLineY, knowLineX, knowY, knowYaxis;
// function buildKnowledgeLine(){
// 		// build the knowledge chart
//     var changeExt = d3.extent(data, function(d){ return d.score_change; });
//     var maxChange = (Math.abs(changeExt[0]) > Math.abs(changeExt[1])) ?  Math.abs(changeExt[0]) : Math.abs(changeExt[1]);
//
//     knowLineMeas = {top: 20, right: 60, bottom: 20, left: 60,
//       height: 250 - 40, width: $('#knowLine').innerWidth() - 60 - 60 };
//     knowLineMeas.barWidth = knowLineMeas.width / (maxChange * 2),
//     knowLineSvg = d3.select('#knowLine').append('svg')
//       .attr("width", knowLineMeas.width + knowLineMeas.left + knowLineMeas.right)
//       .attr("height", knowLineMeas.height + knowLineMeas.top + knowLineMeas.bottom)
// 			.attr("fill","rgba(0,124,196,1)")
//       .append('g').attr("transform", "translate(" + knowLineMeas.left + "," + knowLineMeas.top + ")");
//
//     knowLineY = d3.scaleLinear()
//       .range([knowLineMeas.height, 0])
//     knowLineX = d3.scaleLinear()
//       .range([0,knowLineMeas.width])
//       .domain([-maxChange, maxChange])
//
//     var xAxis = d3.axisBottom()
//       .scale(knowLineX)
//     knowLineSvg.append("g")
//       .attr("class", "x kaxis")
//       .attr("transform", "translate(" + (knowLineMeas.barWidth / 2) + "," + knowLineMeas.height + ")")
//       .call(xAxis);
//
//     knowY = d3.axisLeft()
//       .scale(knowLineY).tickFormat(d3.format("d"));
//     knowYaxis = knowLineSvg.append("g")
//       .attr("class", "y kaxis")
//
//     knowYaxis.append("text")
//       .attr("transform", "rotate(-90)")
//       .attr("y", 6)
//       .attr("dy", ".71em")
//       .style("text-anchor", "end")
//       .text("Participants");
//
//   drawPies();
//
// }
//
// function drawPies(){
//   /////////////////
//   // PIE HELPERS //
//   // ########### //
//   /////////////////
// 	function findNeighborArc(i, data0, data1, key) {
//     var d;
//     return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}
//     : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}
//     : null;
//   }
//   // # Find the element in data0 that joins the highest preceding element in data1.
//   function findPreceding(i, data0, data1, key) {
//     var m = data0.length;
//     while (--i >= 0) {
//       var k = key(data1[i]);
//       for (var j = 0; j < m; ++j) {
//         if (key(data0[j]) === k) return data0[j];
//       }
//     }
//   }
//   // # Find the element in data0 that joins the lowest following element in data1.
//   function findFollowing(i, data0, data1, key) {
//     var n = data1.length, m = data0.length;
//     while (++i < n) {
//       var k = key(data1[i]);
//       for (var j = 0; j < m; ++j) {
//         if (key(data0[j]) === k) return data0[j];
//       }
//     }
//   }
//   function key(d) {
//     return d.data.key;
//   }
//
// 	var pie = d3.pie().sort(null).value(function(d) { return d.value; });
//
//   var path = d3.arc()
//         .outerRadius(pieRadius - 10)
//         .innerRadius(0);
//
//   arcTween = function(d) {
//     var i = d3.interpolate(this._current, d);
//     this._current = i(0);
//     return function(t) { return path(i(t)); };
//   }
//
//   //////////////////
//   // CATEGORY PIE //
//   // ############ //
//   //////////////////
// 	// customize knowledgechangeColor colors
//   var knowledgechangeColor = function(key){
//     switch(key) {
//       case "increase":
//         return "#91cf60";
//         break;
//       case "decrease":
//         return "#fc8d59";
//         break;
//       case "maintain":
//         return "#ffffbf";
//         break;
//       default:
//         return "#e0e0e0";
//     }
//
//
//   }
//
//   var knowledgechangePieData = d3.nest()
//     .key(function(d) { return d['knowledge_change'][0]; })
//     .rollup(function(value){
//       return value.length
//     })
//     .entries(filteredData)
//
//   var knowledgechangeData0 = knowledgechangePiePath.data(),
//     knowledgechangeData1 = pie(knowledgechangePieData);
//
//   knowledgechangePiePath = d3.select('#knowledgechangePie').select('svg').select('g').selectAll('path').data(knowledgechangeData1, key);
//
//   knowledgechangePiePath.enter().append("path")
//     .each(function(d, i) { this._current = findNeighborArc(i, knowledgechangeData0, knowledgechangeData1, key) || d; })
//     .attr("fill", function(d) { return knowledgechangeColor(d.data.key); })
// 		.attr('d', path)
//   .append("title")
//     .text(function(d) { return d.data.key; });
//
//   knowledgechangePiePath.exit()
//     //  .each(function(d, i) { return findNeighborArc(i, categoryData1, categoryData0, key) || d; })
// 		//  .attr("fill", function(d) { return knowledgechangeColor(d.data.key); })
//   	//  .transition()
//     //  .duration(750)
//     //  .attrTween("d", arcTween)
//     .remove();
//
//   knowledgechangePiePath.transition()
//     .duration(750)
//     .attrTween("d", arcTween);
//
//   // Legend
//   var knowledgechangeLegend = d3.select('#knowledgechangeLegend').selectAll('div').data(knowledgechangePieData, function(d) { return d['key']; });
//   // UPDATE
//   knowledgechangeLegend.html(function(d){
//     return '<i class="fa fa-square" style="color:' + knowledgechangeColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.values + ')</small>';
//   })
//   // ENTER
//   knowledgechangeLegend.enter().append('div')
//   .attr('class', "legend-item")
//   .html(function(d){
//     return '<i class="fa fa-square" style="color:' + knowledgechangeColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.values + ')</small>';
//   })
//   // REMOVE
//   knowledgechangeLegend.exit().remove();
//   // sort
//   knowledgechangeLegend.sort(function(a, b) {
//     return b.value - a.value;
//   })
//
//   //////////////////////
//   // PER TRAINING PIE //
//   // ################ //
//   //////////////////////
//   var perTrainingColor = d3.scaleOrdinal(d3.schemeCategory20).domain(data.map(function(d) { return d['training_name'][0]; }))
//
//   var perTrainingData = d3.nest()
//     .key(function(d) { return d['training_name'][0]; })
//     .rollup(function(value){
//       return value.length
//     })
//     .entries(filteredData)
//
//   var perTrainingData0 = perTrainingPiePath.data(),
//     perTrainingData1 = pie(perTrainingData);
//
//   perTrainingPiePath =  d3.select('#perTrainingPie').select('svg').select('g').selectAll('path').data(perTrainingData1, key);
//
//   perTrainingPiePath.enter().append("path")
//     .each(function(d, i) { this._current = findNeighborArc(i, perTrainingData0, perTrainingData1, key) || d; })
//     .attr("fill", function(d) { return perTrainingColor(d.data.key); })
// 		.attr('d', path)
//   .append("title")
//     .text(function(d) { return d.data.key; });
//
//   perTrainingPiePath.exit()
//   //   .datum(function(d, i) { return findNeighborArc(i, perTrainingData1, perTrainingData0, key) || d; })
//   // .transition()
//   //   .duration(750)
//   //   .attrTween("d", arcTween)
//     .remove();
//
//   perTrainingPiePath.transition()
//     .duration(750)
//     .attrTween("d", arcTween);
//
//   // Legend
//   var perTrainingLegend = d3.select('#perTrainingLegend').selectAll('div').data(perTrainingData, function(d) { return d['key']; });
//   // UPDATE
//   perTrainingLegend.html(function(d){
//     return '<i class="fa fa-square" style="color:' + perTrainingColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.values + ')</small>';
//   })
//   // ENTER
//   perTrainingLegend.enter().append('div')
//   .attr('class', "legend-item")
//   .html(function(d){
//     return '<i class="fa fa-square" style="color:' + perTrainingColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.values + ')</small>';
//   })
//   // REMOVE
//   perTrainingLegend.exit().remove();
//   // sort
//   perTrainingLegend.sort(function(a, b) {
//     return b.values - a.values;
//   })
//
//   //
//   drawBars();
// }

function drawBars(){
  // get sume of participants per brgy

  var brgyBarsData = d3.nest()
    .key(function(d) { if(d['location_id'] === null){ return 'data missing'} else { return d['location_id']; } })
    .rollup(function(values) { return values.length; })
    .entries(filteredData);

  brgyBarsX.domain([0, d3.max(brgyBarsData, function(d) { return d.value; })]);

  brgyBars.attr("height", brgyBarsMeas.barHeight * brgyBarsData.length);

	var barEnter= d3.select('#brgyBars').select('svg').selectAll("g")
			.data(brgyBarsData, function(d){ return d['key']; })

  barEnter.exit().remove();

	barEnter.enter().append("g").each(function(d){
		d3.select(this).append('rect')
			.attr("height", brgyBarsMeas.barHeight - 1)
		d3.select(this).append("text")
			.attr("class","brgy-label")
			.attr("x", -5)
			.attr("y", brgyBarsMeas.barHeight / 2)
			.attr("dy", ".35em")
		d3.select(this).append("text")
			.attr("class","brgy-total")
			.attr("y", brgyBarsMeas.barHeight / 2)
			.attr("dy", ".35em")
	});

	var barUpdate = d3.select('#brgyBars').select('svg').selectAll("g");
  barUpdate.sort(function(a, b) { return b.value - a.value; })
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("transform", function(d, i) { return "translate(" + brgyBarsMeas.left + "," + i * brgyBarsMeas.barHeight + ")"; });
  barUpdate.select("rect")
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("width", function(d) { return brgyBarsX(d.value); })
  barUpdate.select(".brgy-label")
    .text(function(d) {
      if(locationLookup[d.key] === undefined){ return d.key; }
      else { return locationLookup[d.key].barangay + ", " + locationLookup[d.key].municipality; }
    });
  barUpdate.select(".brgy-total")
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("x", function(d) { return brgyBarsX(d.value) + 3; })
    .text(function(d) { return d.value; });

    buildList();
  // drawTimeline();
  // drawKnowLine();

}

// function drawKnowLine(){
//
//   var knowLineData = d3.nest()
//       .key(function(d) { return Math.round(parseFloat(d.score_change)); } )
//       .rollup(function(values) { return values.length; })
//       .entries(filteredData.filter(function(d){ return d.score_change !== "data missing"}));
//   knowLineData.forEach(function(d){
//     d.key = parseFloat(d.key);
//   });
//   knowLineData.sort(function(a,b){
//     return a.key - b.key
//   });
//
//   knowLineY.domain(d3.extent(knowLineData, function(d){ return d.value }))
//
//   knowYaxis.call(knowY)
//
//   var g = knowLineSvg.selectAll(".bar")
//         .data(knowLineData, function(d){ return d['key']; })
//
//   g.enter().append("rect").transition().duration(1000).ease(d3.easeSinInOut)
//         .attr("class", "bar")
//         .attr("x", function(d) { return knowLineX(d.key) + 1; })
//         .attr("width", knowLineMeas.barWidth - 2)
//         .attr("y", function(d) {
// 					return knowLineY(d.value); })
//         .attr("height", function(d) { return knowLineMeas.height - knowLineY(d.value) + 1; });
//
//   g.exit().remove();
//
//
//   buildList();
//
// }
//
function buildList(){

  $('#listTable').empty();

  $('#listTable').html('<table data-sortable id="dataTable" class="compact stripe cell-border" cellspacing="0">' +
      '<thead>'+
        '<tr><th>Household ID<br><input class="column-search" type="search" placeholder="search..." /></th>'+
        '<th>First<br><input class="column-search" type="search" placeholder="search..." /></th>'+
        '<th>Last<br><input class="column-search" type="search" placeholder="search..." /></th>'+
        '<th>Barangay<br><input class="column-search" type="search" placeholder="search..." /></th>'+
        '<th>Municipality<br><input class="column-search" type="search" placeholder="search..." /></th>'+
        '<th>Assistance Type<br><input class="column-search" type="search" placeholder="search..." /></th>'+
        '<th>Assistance Received<br><input class="column-search" type="search" placeholder="search..." /></th>'+
      '</thead>'+
      '<tbody></tbody></table>');

  var readableTime = d3.timeFormat("%d-%b-%Y");

  $.each(filteredData, function(i,d){
    var rowHtml = '<tr>' +
      '<td>' + d.household_id + '</td>' +
      '<td>' + d.participant_fname + '</td>' +
      '<td>' + d.participant_lname + '</td>' +
      '<td>' + adminText(d.location_id, 'brgy') + '</td>' +
      '<td>' + adminText(d.location_id, 'muni') + '</td>' +
      '<td>' + d.type_assistance + '</td>' +
      '<td>' + d.assistance_received+ '</td>' +
      '</tr>';
    $('#listTable tbody').append(rowHtml);
  });

  var table = $('#dataTable').DataTable({
        // scrollX: true,
        "sDom":'lrtip',
        "lengthChange": false,
        "pageLength": 10,
        // "lengthMenu": [ 10, 50, 100 ],
        "language": {
          "lengthMenu": "Display _MENU_ records",
          "info": "Showing _START_ to _END_ of _TOTAL_ records",
        }
      });

      // stop a click in the search input box from triggering a sort on the column
      $('.column-search').on('click', function(e){
        e.stopPropagation();
      });

      // initialize column search functionality
      table.columns().every( function() {
        var that = this;
        $('input', this.header() ).on('keyup change', function(){
          if( that.search() !== this.value ){
            that
            .search( this.value )
            .draw();
          }
        });
      });
}

getLocationData();
</script>
