<script src="//ajax.aspnetcdn.com/ajax/jquery.validate/1.13.1/jquery.validate.min.js"></script>
<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />
<script src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.2/handlebars.min.js"></script>
<!-- <script src="/js/users.js"></script> -->
<script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>
<link rel="stylesheet" href="css/map.css" />

<header class="row header">
	<div class="col-md-12">
		<h1>Households map</h1>
	</div>
</header>
<nav class="navbar row">
	<ul class="nav navbar-nav">
		<li>
			<!-- <a href="#" id="add-toggle" data-toggle="modal" data-target="#add-user-modal"><b class="glyphicon glyphicon-plus"></b> Create User</a> -->
		</li>
	</ul>
</nav>

<div id="myMap"></div>

<script>
function sizeMap(){
	$('#myMap').css("height", function(){
		return $(window).height() - 150;
	});
}
$(window).resize(function(){
	sizeMap();
});
sizeMap();
var mapUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
var mapAttribution = 'Map data &copy; <a href="http://openstreetmap.org" target="_blank">OpenStreetMap</a> | CC-BY <a href="http://redcross.org" title="Red Cross" target="_blank">Red Cross</a> 2015 | <a title="Disclaimer" onClick="showDisclaimer();">Disclaimer</a>';
var mapTiles = L.tileLayer(mapUrl, {attribution: mapAttribution});
var map = L.map('myMap', {
    zoom: 3,
    center: [0,0],
    // scrollWheelZoom: false,
    layers: [mapTiles]
});



function parseLocations() {
  var data = JSON.parse('{{{json pgdata}}}');
  var featureCollection= { "type": "featureCollection", "features": [] };
  $.each(data, function(index, item) {
    if(parseFloat(item.gps_long) != NaN && parseFloat(item.gps_lat) != NaN){
      var latlng = [parseFloat(item.gps_long), parseFloat(item.gps_lat)];
      var thisGeoJsonObject = {
        "type": "Feature",
        "properties": {
          "head_of_hh_fname": item.head_of_hh_fname,
          "head_of_hh_lname": item.head_of_hh_lname,
          "head_of_hh_mname": item.head_of_hh_mname,
          "household_id": item.household_id
        },
        "geometry": {
          "type": "Point",
          "coordinates": latlng
        }
      };
      featureCollection.features.push(thisGeoJsonObject);
    }
  });


  var centroidOptions = {
      radius: 5,
      fillColor: "#ED1B2E",
      fillOpacity: 1,
      weight: 0

  };

  locationsLayer = L.geoJson(featureCollection.features, {
    pointToLayer: function (feature, latlng) {
      return L.circleMarker(latlng, centroidOptions);
    },
    onEachFeature: onEachFeature
  }).addTo(map);
  mapBounds = locationsLayer.getBounds();
  map.fitBounds(mapBounds);

  map.addLayer(locationsLayer);
}

function onEachFeature(feature,layer) {
  var popupContent = feature.properties.head_of_hh_fname + " " + feature.properties.head_of_hh_fname + "<br> (" + feature.properties.household_id + ")";
  layer.bindPopup(popupContent);
}

parseLocations();

</script>
