<div id="chast-page">

<div class="row">
	<div class="columns">
		<h2>Children Hygiene and Sanitation Transformation</h2>
	</div>
</div>

<br>

<div class="row">
  <div class="columns">
    <div id="loader" class="text-center">
    	<img src="{{opts.nginxlocation}}media/ajax_loader_gray_512.gif" alt="loading..." />
    </div>
    <p>
      <u>ACTIVE FILTERS</u>: <span id="filter-active-text"></span><br>
      <a onclick="clearAllCheckboxes();"><i class="fa fa-trash-o"></i> clear ALL filters</a>
    </p>
    <ul class="tabs" data-active-collapse="true" data-tabs id="filter-nav">
    	<!-- panel titles go here -->
    </ul>
    <div class="tabs-content" data-tabs-content="filter-nav" id="filter-nav-tabs">
      <!-- collapse divs go here -->
    </div>
  </div>
</div>
<br>

<div class="row">
  <div class="columns">
	   <div id="schoolBars"></div>
  </div>
</div>

<br>

<div class="row">
	<div class="small-12 medium-offset-1 medium-10 columns">
    <h4>Participation breakdown per Gender</h4>
			<div id="perGenderGraph"></div>
  </div>
</div>

<br>

<div class="row">
	<div class="small-12 medium-offset-1 medium-10 columns">
    <h4>Participation breakdown per Grade Level</h4>
    <div id="perGradeGraph"></div>
  </div>
</div>

<br>

<div class="row">
  <div class="columns">
      <div id="listTable"></div>
  </div>
</div>

</div><!-- / container -->

<br>
{{> page/footer}}


<link rel="stylesheet" href="//cdn.datatables.net/1.10.13/css/jquery.dataTables.min.css">
<style>
  /* because we want dark grey not blue sort arrows */
  table.dataTable thead .sorting_asc { background-image: url("{{opts.nginxlocation}}media/sort_asc.png"); }
  table.dataTable thead .sorting_desc { background-image: url("{{opts.nginxlocation}}media/sort_desc.png"); }
</style>

<script>

var data=[], filteredData;
var locationLookup = {};

var commaSeperator = d3.format(",");

function adminText(schoolId, type){
  if(locationLookup[schoolId] === undefined){ return "no data"}
  else if (type === "school") {
    return locationLookup[schoolId].training_venue;
  }else { return "error" }
}

function getSchoolData(){
	$.get('{{opts.nginxlocation}}api/pages/targetschools', function(response){
    $.each(response, function(index, training){
      locationLookup[training.location_id] = training;
      locationLookup[training['location_id']] = training;
    });
	fetchData();
  });
}

function fetchData(){
  $.get('{{opts.nginxlocation}}api/pages/chast', function(response){
		data=response;
		var counter=0;
		data.forEach(function(d){
			d['location_id'] = [d['location_id']];
      d['location'] = [d['location_id'].slice(0,2), d['location_id']];
			d['training_venue'] = [d['training_venue']];
      counter++;
      if(counter === data.length){ buildFilters(); }
    });
	});
}

function buildFilters(){
	// # get the unique values from the data for all our filter fields
   var schoolArray = [], locationArray = [];

	 console.log(data);
	 console.log(locationLookup);

	$.each(data, function(i,item){
    item['location_id'].forEach(function(d){
      if($.inArray(d, locationArray) === -1){ locationArray.push(d) }
    });
  });
  // # alphabetize them arrays
  locationArray.sort(function(a, b) { return a - b; });

	// # build the html and add it to the page
  var panelTitles = [];
    // var panelBodies = [];
    function panelHtml(title, dataId, array, geo){
      var thisTitleHtml = '<li class="tabs-title">' + '<a href="#' + dataId + '">' + title + '</a></li>';
      panelTitles.push(thisTitleHtml);
			var thisBodyHtml = '<div class="tabs-panel" id="' + dataId + '">';
			if(geo === true) {
        var municipArray = [];
        $.each(array, function(i, a){
          var thisMunicip = a.slice(0,2);
					if($.inArray(thisMunicip, municipArray) === -1 && locationLookup[thisMunicip] !== undefined){
            municipArray.push(thisMunicip);
            thisBodyHtml += (municipArray.length > 0) ? '<br>' : '';
            thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
                thisMunicip + '" onchange="filter();"><strong>' + locationLookup[thisMunicip].location_id.slice(0,2) + '<strong></label></div><br>';
          }
					if(locationLookup[a] === undefined){
							thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
              a + '" onchange="filter();">' + 'data error' + '</label></div>';
					}
          else{
						thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
            a + '" onchange="filter();">' + locationLookup[a].training_venue + '</label></div>'; }
        })
      } else {
        $.each(array, function(i, a){
          thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="'+
              dataId + '" value="' + a + '" onchange="filter();">' + a + '</label></div>';
        })
      }
      thisBodyHtml += '</div>';
      $('#filter-nav-tabs').append(thisBodyHtml);

    }
    panelHtml('School', null, locationArray, true);
    $('#filter-nav').append(panelTitles);
    Foundation.reInit($('#filter-nav'))
    filteredData = data;
    $('#loader').hide();
    buildBars();
}

var schoolBarsMeas, schoolBars, schoolBarsX;

function buildBars(){
  schoolBarsMeas = {top: 20, right: 50, bottom: 20, left: 170, barHeight: 20, width: $('#schoolBars').innerWidth()};
  schoolBars = d3.select('#schoolBars').append('svg')
      .attr("width", schoolBarsMeas.width)

  schoolBarsX = d3.scaleLinear()
      .range([0, schoolBarsMeas.width - schoolBarsMeas.left - schoolBarsMeas.right])

  drawBars();
}

function drawBars(){
	// get sum of participants for each school
	var schoolBarsData = d3.nest()
		.key(function(d) { return d['location_id']; })
		.rollup(function(value) { return value.length; })
		.entries(filteredData);

	schoolBarsX.domain([0, d3.max(schoolBarsData, function(d) { return d.value; })]);

	schoolBars.attr("height", schoolBarsMeas.barHeight * schoolBarsData.length);

	var barEnter = d3.select('#schoolBars').select('svg').selectAll("g")
			.data(schoolBarsData, function(d){ return d['key']; })

	barEnter.exit().remove();

	barEnter.enter().append("g").each(function(d){
		d3.select(this).append('rect')
			.attr("height", schoolBarsMeas.barHeight - 1)
			.style("fill","#c11b2b")
		d3.select(this).append("text")
			.attr("class","school-label")
			.attr("x", -5)
			.attr("y", schoolBarsMeas.barHeight / 2)
			.attr("dy", ".35em")
			.style("text-anchor","end")
			.style("fill","black")
			.style("font-size","11px")
			.style("font-family","inherit")
		d3.select(this).append("text")
			.attr("class","school-total")
			.attr("y", schoolBarsMeas.barHeight / 2)
			.attr("dy", ".35em")
			.style("text-anchor","start")
			.style("fill","black")
			.style("font-size","11px")
			.style("font-family","inherit")
	});

	var barUpdate = d3.select('#schoolBars').select('svg').selectAll("g");
	barUpdate.sort(function(a, b) { return b.value - a.value; })
		.transition().duration(1000).ease(d3.easeLinear)
		.attr("transform", function(d, i) { return "translate(" + schoolBarsMeas.left + "," + i * schoolBarsMeas.barHeight + ")"; });
	barUpdate.select("rect")
		.transition().duration(1000).ease(d3.easeLinear)
		.attr("width", function(d) { return schoolBarsX(d.value); })
	barUpdate.select(".school-label")
		.text(function(d) {
			if(locationLookup[d.key] === undefined){ return d.key; }
			else { return locationLookup[d.key].training_venue; }
		});
	barUpdate.select(".school-total")
		.transition().duration(1000).ease(d3.easeLinear)
		.attr("x", function(d) { return schoolBarsX(d.value) + 3; })
		.text(function(d) { return d.value; });

		// buildList();
}

function filter(){
  // # look at all the checkboxes and record whats checked
  activeFilters = []
  checkboxes = $("#filter-nav-tabs input[type=checkbox]");
    for (i=0; i<checkboxes.length; i++) {
      if(checkboxes[i].checked === true) {
        activeFilters.push({
          filterKey: checkboxes[i].name,
          filterValue: checkboxes[i].value
        })
      }
    }

  // # reformat the data on checks to make it easier to work with
  // ? combine this into what's above
  filterData = d3.nest().key(function(d){ return d.filterKey }).rollup(function(value){
      var valuesArray = [];
      value.forEach(function(d){
        valuesArray.push(d.filterValue);
      });
      return valuesArray;
    }).entries(activeFilters)
  // # update the html on the page to let the user know what filters are active
  var keyGroups = [];
  $.each(filterData,function(i,filterKey){
    var keyGroupHtml = '(<b>' + filterKey.key + '</b> <small>=</small> ';
    var valueGroups = [];
    $.each(filterKey.value, function(j,filterValue){
      valueGroups.push('<b>' + filterValue + '</b>');
    })
    keyGroupHtml += valueGroups.join(" <small>OR</small> ") + ")"
    keyGroups.push(keyGroupHtml);
  });
  $('#filter-active-text').html(keyGroups.join(" <small>AND</small> "));

	// # filter the data
  var filterKeyCount = filterData.length;
  filteredData = data.filter(function(d){
    var passCount = 0;
    var project = d;
    $.each(filterData,function(iKey, filterKey){
      var pass = false;
      var thisKey = filterKey.key;
      $.each(filterKey.value, function(iValue, filterValue){
        // # if any of the filter values for a given key are present, that filter key is passed
        if($.inArray(filterValue, project[thisKey]) !== -1){ pass = true; }
      });
      if(pass === true){ passCount ++; }
    });
    // # if all filter keys are passed, the project passes the filtering
    return passCount === filterKeyCount;
  })
  console.log(filteredData.length)

  drawBars();

}

var activitiesHeaders = "";

$.each(d3.range(1,11), function(i, a){
  activitiesHeaders += '<th>' + a + '<br><input class="column-search" type="search" placeholder="search..." /></th>';
})

function buildList(){
	$('#listTable').empty();
	$('#listTable').html('<table data-sortable id="dataTable" class="compact stripe cell-border" cellspacing="0">' +
				'<thead>'+
					'<th>First<br><input class="column-search" type="search" placeholder="search..." /></th>'+
					'<th>Last<br><input class="column-search" type="search" placeholder="search..." /></th>'+
					'<th>School<br><input class="column-search" type="search" placeholder="search..." /></th>'+
					activitiesHeaders +
					'<th>Modules attended<br><input class="column-search" type="search" placeholder="search..." /></th>'+
				'</thead>'+
				'<tbody></tbody></table>');
	$.each(filteredData, function(i,d){
		var rowHtml = '<tr>' +
			'<td>' + d['participant_fname'] + '</td>' +
			'<td>' + d['participant_lname'] + '</td>' +
			'<td>' + adminText(d.location_id, 'school') + '</td>';
	$.each(d3.range(1,11), function(i, a){
		var thisSearch = "training_activity_" + a;
		rowHtml += '<td>' + d[thisSearch] + '</td>';
	})
	rowHtml += '<td>' + d['training_total_attendance'] + '</td>' +
		'</tr>';
		$('#listTable tbody').append(rowHtml);
	});


	var table = $('#dataTable').DataTable({
			// scrollX: true,
			"sDom":'lrtip',
			"lengthChange": false,
			"pageLength": 10,
			// "lengthMenu": [ 10, 50, 100 ],
			"language": {
				"lengthMenu": "Display _MENU_ records",
				"info": "Showing _START_ to _END_ of _TOTAL_ records",
			}
		});

		// stop a click in the search input box from triggering a sort on the column
		$('.column-search').on('click', function(e){
			e.stopPropagation();
		});

		// initialize column search functionality
		table.columns().every( function() {
			var that = this;
			$('input', this.header() ).on('keyup change', function(){
				if( that.search() !== this.value ){
					that
					.search( this.value )
					.draw();
				}
			});
		});
}

getSchoolData();
</script>
