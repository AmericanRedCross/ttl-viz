<div id="sted-page">

<div id="details-modal" class="reveal" data-reveal>
  <button class="close-button" data-close aria-label="Close modal" type="button"><span aria-hidden="true">&times;</span></button>
  <h5 class="modal-title"></h5>
  <div class="modal-body">
    <p></p>
  </div>
</div>


<div class="row">
	<div class="columns">
		<h2>STED participants</h2>
	</div>
</div>

<br>

<div class="row">
  <div class="columns">
    <div id="loader" class="text-center">
    	<img src="{{opts.nginxlocation}}media/ajax_loader_gray_512.gif" alt="loading..." />
    </div>
    <p>
      <u>ACTIVE FILTERS</u>: <span id="filter-active-text"></span><br>
      <a onclick="clearAllCheckboxes();"><i class="fa fa-trash-o"></i> clear ALL filters</a>
    </p>
    <ul class="tabs" data-active-collapse="true" data-tabs id="filter-nav">
    	<!-- panel titles go here -->
    </ul>
    <div class="tabs-content" data-tabs-content="filter-nav" id="filter-nav-tabs">
      <!-- collapse divs go here -->
    </div>
  </div>
</div>
<br>

<div class="row">
  <div class="columns">
	   <div id="brgyBars"></div>
  </div>
</div>

<br>

<div class="row">
	<div class="small-3 columns">
    <h4>Gender</h4>
	  <div id="genderPie"></div>
	</div>
	<div class="small-3 columns"><div id="genderLegend"> </div></div>
	<div class="small-3 columns">
    <h4>Civil status</h5>
	  <div id="civilPie"></div>
	</div>
	<div class="small-3 columns"> <div id="civilLegend"> </div> </div>
</div>

<br>

<div class="row">
	<div class="small-3 columns">
    <h4>Training applied for</h4>
	  <div id="trainingPie"></div>
	</div>
	<div class="small-3 columns end"><div id="trainingLegend"> </div></div>
  <div class="small-3 columns">
    <h4>Certification Results</h4>
	  <div id="certificationPie"></div>
	</div>
	<div class="small-3 columns end"><div id="certificationLegend"> </div></div>
</div>

<br>

<div class="row">
  <div class="columns">
      <div id="listTable"></div>
  </div>
</div>

</div><!-- / container -->

<br>
{{> page/footer}}


<link rel="stylesheet" href="//cdn.datatables.net/1.10.13/css/jquery.dataTables.min.css">
<style>
  /* because we want dark grey not blue sort arrows */
  table.dataTable thead .sorting_asc { background-image: url("{{opts.nginxlocation}}media/sort_asc.png"); }
  table.dataTable thead .sorting_desc { background-image: url("{{opts.nginxlocation}}media/sort_desc.png"); }
</style>
<script src="//cdn.datatables.net/1.10.13/js/jquery.dataTables.min.js"></script>
<script>
var data, filteredData;
var locationLookup = {};

var commaSeperator = d3.format(",");

function ageCheck(input) {
  if(isNaN(new Date(input))){
    return "error calculating"
  } else{
    var today = new Date();
    var birth = new Date(input);
    var age = today.getFullYear() - birth.getFullYear() - 1; // Starting point
    if( birth.getMonth() < today.getMonth() ) { age++;} // If it's past their birth month
    if( birth.getMonth() == today.getMonth() && birth.getDate() <= today.getDate()) { age++; } // If it's past their birth day
    return age;
  }
}

d3.select(window).on("resize", throttle);
var throttleTimer;
function throttle() {
  window.clearTimeout(throttleTimer);
    throttleTimer = window.setTimeout(function() {
      resize();
    }, 200);
}
function resize() {
  d3.select("#genderPie").select("svg").remove();
  d3.select('#civilPie').select("svg").remove();
  d3.select('#trainingPie').select("svg").remove();
  d3.select('#certificationPie').select("svg").remove();
  d3.select('#brgyBars').select("svg").remove();

  buildPies();
}

function clearAllCheckboxes(){
  var allCheckboxes = $.find("input:checkbox");
  $.each(allCheckboxes, function(i, box){ $(box).prop('checked',false); });
  filter();
}

function getLocationData(){
  $.get('{{opts.nginxlocation}}api/pages/targetlocations', function(response){
    $.each(response, function(index, location){
      locationLookup[location.location_id] = location;
      locationLookup[location['location_id'].slice(0,2)] = location;
    });
    fetchData();
  });
}

function fetchData(){
  $.get('{{opts.nginxlocation}}api/pages/sted', function(response){
    data = response;
    var counter = 0;
    data.forEach(function(d){
      // # for the filter to work all the filtered data values need to be arrays even if all possibilities are just 1 value
      // # this is keeping the option of filtering on 'proposed_items' open which is a comma seperated data field
      d['civil_status'] = [d['civil_status']];
      d['sex'] = [d['sex']];
      d['training_applied_for'] = [d['training_applied_for']];
      d['location'] = [d['location_id'].slice(0,2), d['location_id'].slice(0,5)];
      counter++;
      if(counter === data.length){ buildFilters(); }
    });
  });
}

function buildFilters(){
  // # get the unique values from the data for all our filter fields
   var civilArray = [], genderArray = [], trainingArray = [], locationArray = [];
     $.each(data, function(i,item){
    item['civil_status'].forEach(function(d){
      if($.inArray(d, civilArray) === -1){ civilArray.push(d) }
    });
    item['sex'].forEach(function(d){
      if($.inArray(d, genderArray) === -1){ genderArray.push(d) }
    });
    item['training_applied_for'].forEach(function(d){
      if($.inArray(d, trainingArray) === -1){ trainingArray.push(d) }
    });
    if($.inArray(item['location_id'], locationArray) === -1){ locationArray.push(item['location_id']) }

  });
  // # alphabetize them arrays
  civilArray.sort(d3.ascending);
  genderArray.sort(d3.ascending);
  trainingArray.sort(d3.ascending);
  locationArray.sort(function(a, b) { return a - b; });
  // # build the html and add it to the page
  var panelTitles = [];
    // var panelBodies = [];
    function panelHtml(title, dataId, array, geo){
      var thisTitleHtml = '<li class="tabs-title">' +
        '<a href="#' + dataId + '">' + title + '</a></li>';
      panelTitles.push(thisTitleHtml);
      var thisBodyHtml = '<div class="tabs-panel" id="' + dataId + '">';
      if(geo === true) {
        var municipArray = [];
        $.each(array, function(i, a){
          var thisMunicip = a.slice(0,2);
          if($.inArray(thisMunicip, municipArray) === -1 && locationLookup[thisMunicip] !== undefined){
            municipArray.push(thisMunicip);
            thisBodyHtml += (municipArray.length > 0) ? '<br>' : '';
            thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
                thisMunicip + '" onchange="filter();"><strong>' + locationLookup[thisMunicip].municipality + '<strong></label></div><br>';
          }
          if(locationLookup[a] === undefined){ thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
              a + '" onchange="filter();">' + 'data error' + '</label></div>'; }
          else { thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="location" value="' +
              a + '" onchange="filter();">' + locationLookup[a].barangay + '</label></div>'; }
        })
      } else {
        $.each(array, function(i, a){
          thisBodyHtml += '<div class="checkbox"><label><input type="checkbox" name="'+
              dataId + '" value="' + a + '" onchange="filter();">' + a + '</label></div>';
        })
      }
      thisBodyHtml += '</div>';
      $('#filter-nav-tabs').append(thisBodyHtml);

    }
    panelHtml('Civil status', 'civil_status', civilArray);
    panelHtml('Gender', 'sex', genderArray);
    panelHtml('Training applied for', 'training_applied_for', trainingArray);
    panelHtml('Location', null, locationArray, true);
    $('#filter-nav').append(panelTitles);
    Foundation.reInit($('#filter-nav'))
    filteredData = data;
    $('#loader').hide();
    buildPies();

}

function filter(){
  // # look at all the checkboxes and record whats checked
  activeFilters = []
  checkboxes = $("#filter-nav-tabs input[type=checkbox]");
    for (i=0; i<checkboxes.length; i++) {
      if(checkboxes[i].checked === true) {
        activeFilters.push({
          filterKey: checkboxes[i].name,
          filterValue: checkboxes[i].value
        })
      }
    }
  // # reformat the data on checks to make it easier to work with
  // ? combine this into what's above
  filterData = d3.nest().key(function(d){ return d.filterKey })
    .rollup(function(values){
      var valuesArray = [];
      values.forEach(function(d){
        valuesArray.push(d.filterValue);
      });
      return valuesArray;
    }).entries(activeFilters)
  // # update the html on the page to let the user know what filters are active
  var keyGroups = [];
  $.each(filterData,function(i,filterKey){
    var keyGroupHtml = '(<b>' + filterKey.key + '</b> <small>=</small> ';
    var valueGroups = [];
    $.each(filterKey.value, function(j,filterValue){
      valueGroups.push('<b>' + filterValue + '</b>');
    })
    keyGroupHtml += valueGroups.join(" <small>OR</small> ") + ")"
    keyGroups.push(keyGroupHtml);
  });
  $('#filter-active-text').html(keyGroups.join(" <small>AND</small> "));
  // # filter the data
  var filterKeyCount = filterData.length;
  filteredData = data.filter(function(d){
    var passCount = 0;
    var project = d;
    $.each(filterData,function(iKey, filterKey){
      var pass = false;
      var thisKey = filterKey.key;
      $.each(filterKey.value, function(iValue, filterValue){
        // # if any of the filter values for a given key are present, that filter key is passed
        if($.inArray(filterValue, project[thisKey]) !== -1){ pass = true; }
      });
      if(pass === true){ passCount ++; }
    });
    // # if all filter keys are passed, the project passes the filtering
    return passCount === filterKeyCount;
  })
  console.log(filteredData.length)

  drawPies()

}


var pieRadius, genderPie, genderPiePath, civilPie, civilPiePath, trainingPie, trainingPiePath, certificationPie, certificationPiePath;
function buildPies(){

  var widthOnPage = $('#genderPie').innerWidth();
  var width = (widthOnPage < 300) ? widthOnPage : 300;
  var height = width;
  pieRadius = Math.min(width, height) / 2;

  genderPie = d3.select('#genderPie').append("svg")
      .attr("width", width)
      .attr("height", height)
    .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
  genderPiePath = genderPie.selectAll("path");

  civilPie = d3.select('#civilPie').append("svg")
      .attr("width", width)
      .attr("height", height)
    .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
  civilPiePath = civilPie.selectAll("path");

  trainingPie = d3.select('#trainingPie').append("svg")
      .attr("width", width)
      .attr("height", height)
    .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
  trainingPiePath = trainingPie.selectAll("path");

  certificationPie = d3.select('#certificationPie').append("svg")
      .attr("width", width)
      .attr("height", height)
    .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
  certificationPiePath = certificationPie.selectAll("path");

  buildBars();
};

var brgyBarsMeas, brgyBars, brgyBarsX;
function buildBars(){
  brgyBarsMeas = {top: 20, right: 50, bottom: 20, left: 170, barHeight: 20, width: $('#brgyBars').innerWidth()};
  brgyBars = d3.select('#brgyBars').append('svg')
      .attr("width", brgyBarsMeas.width)

  brgyBarsX = d3.scaleLinear()
      .range([0, brgyBarsMeas.width - brgyBarsMeas.left - brgyBarsMeas.right])

  drawPies();
}

function drawPies(){
  /////////////////
  // PIE HELPERS //
  // ########### //
  /////////////////
  function findNeighborArc(i, data0, data1, key) {
    var d;
    return (d = findPreceding(i, data0, data1, key)) ? {startAngle: d.endAngle, endAngle: d.endAngle}
    : (d = findFollowing(i, data0, data1, key)) ? {startAngle: d.startAngle, endAngle: d.startAngle}
    : null;
  }
  // # Find the element in data0 that joins the highest preceding element in data1.
  function findPreceding(i, data0, data1, key) {
    var m = data0.length;
    while (--i >= 0) {
      var k = key(data1[i]);
      for (var j = 0; j < m; ++j) {
        if (key(data0[j]) === k) return data0[j];
      }
    }
  }
  // # Find the element in data0 that joins the lowest following element in data1.
  function findFollowing(i, data0, data1, key) {
    var n = data1.length, m = data0.length;
    while (++i < n) {
      var k = key(data1[i]);
      for (var j = 0; j < m; ++j) {
        if (key(data0[j]) === k) return data0[j];
      }
    }
  }

  function key(d) {
    return d.data.key

  }

  var pie = d3.pie().sort(null).value(function(d) { return d.value; });

  var path = d3.arc()
        .outerRadius(pieRadius - 10)
        .innerRadius(0);

  arcTween = function(d) {
    var i = d3.interpolate(this._current, d);
    this._current = i(0);
    return function(t) { return path(i(t)); };
  }

  ////////////////
  // GENDER PIE //
  // ########## //
  ////////////////
  var genderColor = d3.scaleOrdinal(d3.schemeCategory20).domain(data.map(function(d) { return d['sex'][0]; }))

  var genderPieData = d3.nest()
    .key(function(d) { return d['sex'][0]; })
    .rollup(function(value){
      return value.length
    })
    .entries(filteredData)

  var genderData0 = genderPiePath.data(),
    genderData1 = pie(genderPieData);

  genderPiePath = d3.select('#genderPie').select('svg').select('g').selectAll('path').data(genderData1, key);

  genderPiePath.enter().append("path")
    .each(function(d, i) { this._current = findNeighborArc(i, genderData0, genderData1, key) || d; })
    .attr("fill", function(d) { return genderColor(d.data.key); })
    .attr('d', path)
  .append("title")
    .text(function(d) { return d.data.key; });


  genderPiePath.exit()
  //   .datum(function(d, i) { return findNeighborArc(i, genderData1, genderData0, key) || d; })
  // .transition()
  //   .duration(750)
  //   .attrTween("d", arcTween)
    .remove();

  genderPiePath.transition()
    .duration(750)
    .attrTween("d", arcTween);

  // Legend
  var genderLegend = d3.select('#genderLegend').selectAll('div').data(genderPieData, function(d) { return d['key']; });
  // UPDATE
  genderLegend.html(function(d){
    return '<i class="fa fa-square" style="color:' + genderColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.value + ')</small>';
  })
  // ENTER
  genderLegend.enter().append('div')
  .attr('class', "legend-item")
  .html(function(d){
    return '<i class="fa fa-square" style="color:' + genderColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.value + ')</small>';
  })
  // REMOVE
  genderLegend.exit().remove();
  // sort
  genderLegend.sort(function(a, b) {
    return b.value - a.value;
  })

  //////////////////////
  // CIVIL STATUS PIE //
  // ################ //
  //////////////////////
  var civilColor = d3.scaleOrdinal(d3.schemeCategory20).domain(data.map(function(d) { return d['civil_status'][0]; }))

  var civilPieData = d3.nest()
    .key(function(d) { return d['civil_status'][0]; })
    .rollup(function(value){
      return value.length
    })
    .entries(filteredData)

  var civilData0 = civilPiePath.data(),
    civilData1 = pie(civilPieData);

  civilPiePath = d3.select('#civilPie').select('svg').select('g').selectAll('path').data(civilData1, key);

  civilPiePath.enter().append("path")
    .each(function(d, i) { this._current = findNeighborArc(i, civilData0, civilData1, key) || d; })
    .attr("fill", function(d) { return civilColor(d.data.key); })
    .attr('d', path)
  .append("title")
    .text(function(d) { return d.data.key; });

  civilPiePath.exit()
  //   .datum(function(d, i) { return findNeighborArc(i, civilData1, civilData0, key) || d; })
  // .transition()
  //   .duration(750)
  //   .attrTween("d", arcTween)
    .remove();

  civilPiePath.transition()
    .duration(750)
    .attrTween("d", arcTween);

  // Legend
  var civilLegend = d3.select('#civilLegend').selectAll('div').data(civilPieData, function(d) { return d['key']; });
  // UPDATE
  civilLegend.html(function(d){
    return '<i class="fa fa-square" style="color:' + civilColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.value + ')</small>';
  })
  // ENTER
  civilLegend.enter().append('div')
  .attr('class', "legend-item")
  .html(function(d){
    return '<i class="fa fa-square" style="color:' + civilColor(d.key) + '"></i> &nbsp;' + d.key + ' <small>(' + d.value + ')</small>';
  })
  // REMOVE
  civilLegend.exit().remove();
  // sort
  civilLegend.sort(function(a, b) {
    return b.value - a.value;
  })

  //////////////////
  // TRAINING PIE //
  // ############ //
  //////////////////
  var trainingColor = d3.scaleOrdinal(d3.schemeCategory20).domain(data.map(function(d) { return d['training_applied_for'][0]; }))

  var trainingPieData = d3.nest()
    .key(function(d) { return d['training_applied_for'][0]; })
    .rollup(function(value){
      return value.length
    })
    .entries(filteredData)

  var trainingData0 = trainingPiePath.data(),
    trainingData1 = pie(trainingPieData);

  trainingPiePath = d3.select('#trainingPie').select('svg').select('g').selectAll('path').data(trainingData1, key);

  trainingPiePath.enter().append("path")
    .each(function(d, i) { this._current = findNeighborArc(i, trainingData0, trainingData1, key) || d; })
    .attr("fill", function(d) { return trainingColor(d.data.key); })
    .attr('d', path)
  .append("title")
    .text(function(d) { return d.data.key; });

  trainingPiePath.exit().remove();

  trainingPiePath.transition()
    .duration(750)
    .attrTween("d", arcTween);

  // Legend
  var trainingLegend = d3.select('#trainingLegend').selectAll('div').data(trainingPieData, function(d) { return d['key']; });
  // UPDATE
  trainingLegend.html(function(d){
    return '<i class="fa fa-square" style="color:' + trainingColor(d.key) + '"></i> &nbsp;' + d.key.toLowerCase() + ' <small>(' + d.value + ')</small>';
  })
  // ENTER
  trainingLegend.enter().append('div')
  .attr('class', "legend-item")
  .html(function(d){
    return '<i class="fa fa-square" style="color:' + trainingColor(d.key) + '"></i> &nbsp;' + d.key.toLowerCase() + ' <small>(' + d.value + ')</small>';
  })
  // REMOVE
  trainingLegend.exit().remove();
  // sort
  trainingLegend.sort(function(a, b) {
    return b.value - a.value;
  })

  ///////////////////////
  // CERTIFICATION PIE //
  // ################# //
  ///////////////////////
  var certificationColor = d3.scaleOrdinal(d3.schemeCategory20).domain(data.map(function(d) { return d['certification_result']; }))

  var certificationPieData = d3.nest()
    .key(function(d) { return d['certification_result']; })
    .rollup(function(value){ return value.length })
    .entries(filteredData)

  var certificationData0 = certificationPiePath.data(), certificationData1 = pie(certificationPieData);

  certificationPiePath = d3.select('#certificationPie').select('svg').select('g').selectAll('path').data(certificationData1, key);

  certificationPiePath.enter().append("path")
    .each(function(d, i) { this._current = findNeighborArc(i, certificationData0, certificationData1, key) || d; })
    .attr("fill", function(d) { return certificationColor(d.data.key); })
    .attr('d', path)
    .append("title")
    .text(function(d) { return d.data.key; });

  certificationPiePath.exit().remove();

  certificationPiePath.transition().duration(750).attrTween("d", arcTween);

  // Legend
  var certificationLegend = d3.select('#certificationLegend').selectAll('div').data(certificationPieData, function(d) { return d['key']; });
  // UPDATE
  certificationLegend.html(function(d){
    return '<i class="fa fa-square" style="color:' + certificationColor(d.key) + '"></i> &nbsp;' + d.key.toLowerCase() + ' <small>(' + d.value + ')</small>';
  })
  // ENTER
  certificationLegend.enter().append('div')
  .attr('class', "legend-item")
  .html(function(d){
    return '<i class="fa fa-square" style="color:' + certificationColor(d.key) + '"></i> &nbsp;' + d.key.toLowerCase() + ' <small>(' + d.value + ')</small>';
  })
  // REMOVE
  certificationLegend.exit().remove();
  // sort
  certificationLegend.sort(function(a, b) { return b.value - a.value; })

  drawBars();
}

function drawBars(){
  // get sume of grants per brgy
  var brgyBarsData = d3.nest()
    .key(function(d) { return d['household_id'].slice(0,5); })
    .rollup(function(value) { return value.length; })
    .entries(filteredData);

  brgyBarsX.domain([0, d3.max(brgyBarsData, function(d) { return d.value; })]);

  brgyBars.attr("height", brgyBarsMeas.barHeight * brgyBarsData.length);

  var barEnter = d3.select('#brgyBars').select('svg').selectAll("g")
      .data(brgyBarsData, function(d){ return d['key']; })

  barEnter.exit().remove();

  barEnter.enter().append("g").each(function(d){
    d3.select(this).append('rect')
      .attr("height", brgyBarsMeas.barHeight - 1)
    d3.select(this).append("text")
      .attr("class","brgy-label")
      .attr("x", -5)
      .attr("y", brgyBarsMeas.barHeight / 2)
      .attr("dy", ".35em")
    d3.select(this).append("text")
      .attr("class","brgy-total")
      .attr("y", brgyBarsMeas.barHeight / 2)
      .attr("dy", ".35em")
  });

  var barUpdate = d3.select('#brgyBars').select('svg').selectAll("g");
  barUpdate.sort(function(a, b) { return b.value - a.value; })
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("transform", function(d, i) { return "translate(" + brgyBarsMeas.left + "," + i * brgyBarsMeas.barHeight + ")"; });
  barUpdate.select("rect")
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("width", function(d) { return brgyBarsX(d.value); })
  barUpdate.select(".brgy-label")
    .text(function(d) {
      if(locationLookup[d.key] === undefined){ return d.key; }
      else { return locationLookup[d.key].barangay + ", " + locationLookup[d.key].municipality; }
    });
  barUpdate.select(".brgy-total")
    .transition().duration(1000).ease(d3.easeLinear)
    .attr("x", function(d) { return brgyBarsX(d.value) + 3; })
    .text(function(d) { return d.value; });

  buildList();

}

function buildList(){

  $('#listTable').empty();
  $('#listTable').html('<table data-sortable id="dataTable" class="compact stripe cell-border" cellspacing="0">' +
        '<thead>'+
          '<tr><th>HH ID<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>First name<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Last name<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Course<br><input class="column-search" type="search" placeholder="search..." /></th>'+
          '<th>Details</th>'+
        '</thead>'+
        '<tbody></tbody></table>');
  $.each(filteredData, function(i,d){
    var rowHtml = '<tr>' +
      '<td>' + d.household_id + '</td>' +
      '<td>' + d.participant_fname + '</td>' +
      '<td>' + d.participant_lname + '</td>' +
      '<td>' + d.training_applied_for + '</td>' +
      '<td><span class="info-modal-trigger" data-id="' + d.id +
      '"><i class="fa fa-info-circle"></i></span></td>' +
      '</tr>';
    $('#listTable tbody').append(rowHtml);
  });


  $('.info-modal-trigger').on('click', function (event) {
    var triggerId = $(this).data('id').toString(); // data-id attribute for the button that triggered the modal
    var modal = $("#details-modal");
    for(i=0;i<filteredData.length;i++){
      if(triggerId === filteredData[i]['id']){
        var hhId = filteredData[i].household_id.toString();
        var name = filteredData[i].participant_fname + " ";
        name += (filteredData[i].participant_mname !== null) ? filteredData[i].participant_mname + " " : "";
        name += filteredData[i].participant_lname;
        modal.find('.modal-title').html(name);
        var location = (locationLookup[filteredData[i].location_id] === undefined) ? "not known" : locationLookup[filteredData[i].location_id].barangay + ", " +
          locationLookup[filteredData[i].location_id].municipality;
        var detailsHtml = "<b>Household location:</b> " + location + "<br>"+
          "<b>Gender:</b> " + filteredData[i].sex + "<br>" +
          "<b>Civil status:</b> " + filteredData[i].civil_status + "<br>" +
          "<b>Birth date:</b> " + filteredData[i].birthdate + "<br>" +
          "<b>Age:</b> " + ageCheck(filteredData[i].birthdate) + "<br>"+
          "<b>Training applied for:</b> " + filteredData[i].training_applied_for + "<br>" +
          "<b>Start date:</b> " + filteredData[i].start_date + "<br>" +
          "<b>National Certification II:</b> " + filteredData[i].certification_result + "<br>"+
          "<b>Job Status:</b> " + filteredData[i].employment_status + "<br>";
        modal.find('.modal-body p').html(detailsHtml);
        break;
      }
    }
    modal.foundation('open');
  });

  var table = $('#dataTable').DataTable({
      // scrollX: true,
      "sDom":'lrtip',
      "lengthChange": false,
      "pageLength": 10,
      // "lengthMenu": [ 10, 50, 100 ],
      "language": {
        "lengthMenu": "Display _MENU_ records",
        "info": "Showing _START_ to _END_ of _TOTAL_ records",
      }
    });

    // stop a click in the search input box from triggering a sort on the column
    $('.column-search').on('click', function(e){
      e.stopPropagation();
    });

    // initialize column search functionality
    table.columns().every( function() {
      var that = this;
      $('input', this.header() ).on('keyup change', function(){
        if( that.search() !== this.value ){
          that
          .search( this.value )
          .draw();
        }
      });
    });

}

getLocationData();

</script>
